@model QREST.Models.vmDataReview2
@{
    ViewBag.Title = "Manual Validation Data Review";
    ViewBag.HideTitle = true;
    ViewBag.HelpLink = "Data-Review";
}
<section class="panel panel-qrest">
    <header class="panel-heading font-bold">Data Review</header>
    <div class="panel-body">

        <div class="bg-gradient pull-out" style="padding:10px; margin-top:-15px;">

            <div class="btn-group pull-right" data-toggle="buttons">
                <label id="btnChartToggle" class="btn btn-default btn-rounded active" data-target="#chartContainer,#chartContainerSupp1,#chartContainerSupp2" data-toggle="collapse">
                    <input type="checkbox" name="option1" id="option1"><i class="fa fa-check text-active"></i> <span><i class="fa fa-line-chart"></i></span>
                </label>
                <label id="btnFilterToggle" class="btn btn-default btn-rounded" data-target="#filterContainer" data-toggle="collapse">
                    <input type="checkbox" name="option3" id="option3"><i class="fa fa-check text-active"></i> <span><i class="fa fa-filter"></i></span>
                </label>

                <label id="btnGridToggle" class="btn btn-default btn-rounded active" data-target="#gridContainer" data-toggle="collapse">
                    <input type="checkbox" name="option2" id="option2"><i class="fa fa-check text-active"></i> <span><i class="fa fa-table"></i></span>
                </label>
            </div>

            <strong class="text-danger">Site: </strong>  @Html.DisplayFor(model => model.selMon.SITE_ID)
            <strong class="m-l-md text-danger">Parameter: </strong> @Html.DisplayFor(model => model.selMon.PAR_NAME) (@Html.DisplayFor(model => model.selMon.PAR_CODE))
            <strong class="m-l-md text-danger">POC: </strong> @Html.DisplayFor(model => model.selMon.T_QREST_MONITORS.POC)
            <strong class="m-l-md text-danger">Method: </strong> @Html.DisplayFor(model => model.selMon.METHOD_CODE)
            <br />
            <strong class="text-danger">Dates: </strong>  @Html.DisplayFor(model => model.selDtStart) - @Html.DisplayFor(model => model.selDtEnd)
        </div>
        <div class="line line-dashed  pull-in"></div>

        <div id="filterContainer" class="pull-out padder collapse" style="background-color:#d3d3d3">
            <strong class="text-danger">Filters: </strong>
            <br/>
            <div class="line line-dashed pull-in"></div>
        </div>
        
        <div id="chartContainer" class="collapse in" style="height: 1px; width: 100%;">
        </div>

        @if (Model.SuppData1 != null)
        {
            <div id="chartContainerSupp1" class="collapse in" style="height: 160px; width: 100%;"></div>
        }

        @if (Model.SuppData2 != null)
        {
            <div id="chartContainerSupp2" class="collapse in" style="height: 160px; width: 100%;"></div>
        }

        @if (Model.selMode == "a")
        {
            <a class=" btn btn-default" href="@Url.Action("AQSGen", new { id = Model.selMon.T_QREST_MONITORS.SITE_IDX, sDt = Model.selDtStart, eDt = Model.selDtEnd })">Back</a>
        }
        else if (Model.selMode == "d")
        {
            <a class=" btn btn-default" href="@Url.Action("DataReview", new { monid = Model.selMon.T_QREST_MONITORS.MONITOR_IDX, sdt = Model.selDtStart, edt = Model.selDtEnd })">Back</a>
        }
        else
        {
            <a class=" btn btn-default" href="@Url.Action("DataReviewSummary", new { id = Model.selMon.T_QREST_MONITORS.SITE_IDX, month = Model.selDtStart.Month, year = Model.selDtStart.Year })">Back</a>
        }
        <a id="divBulk" class="btn btn-success" href="#modal-form1" data-toggle="modal" style="display:none;">Review/Edit Selected Records</a>

        @if (Model.RawData != null)
        {
            <div id="gridContainer" class="table-responsive collapse in">
                <table id="gridData" class="table table-bordered" style="width:100%; ">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectAll" /> All
                            </th>
                            <th>Site</th>
                            <th>Par Code</th>
                            <th>Parameter</th>
                            <th>POC</th>
                            <th>Local Std Time</th>
                            <th>Value</th>
                            <th>Unit</th>
                            <th>QREST Flags</th>
                            @if (Model.selDuration == "1")
                            {
                                <th>AQS Null Code</th>
                                <th>AQS Qual Codes</th>
                                <th>Suitable for AQS </th>
                                <th>Lvl 1</th>
                                <th>Lvl 2</th>
                                <th>Notes</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.RawData.Count; i++)
                        {
                            string dtSortVal = Model.RawData[i].DATA_DTTM.GetValueOrDefault().ToString("yyyy-MM-dd HH-mm");

                            <tr class="irow" data-date="@Html.DisplayFor(model => model.RawData[i].DATA_DTTM)">
                                <td>
                                    @Html.HiddenFor(model => model.RawData[i].DATA_RAW_IDX, new { @class = "id1" })
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].SITE_ID)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].PAR_CODE)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].PAR_NAME)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].POC)
                                </td>
                                <td data-sort='@dtSortVal'>
                                    @Html.DisplayFor(model => model.RawData[i].DATA_DTTM)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].DATA_VALUE)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].UNIT_DESC)
                                </td>
                                <td>
                                    @if (Model.RawData[i].VAL_IND == false)
                                    {
                                        <span class="label bg-warning" data-toggle="tooltip" data-original-title="Record has not had Level 0 validation performed yet."><i class="fa fa-warning"></i></span>
                                    }
                                    @Html.DisplayFor(model => model.RawData[i].VAL_CD)
                                </td>
                                @if (Model.selDuration == "1")
                                {
                                    <td>
                                        @Html.DisplayFor(model => model.RawData[i].AQS_NULL_CODE)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => model.RawData[i].AQS_QUAL_CODES)
                                    </td>
                                    <td style="@(Model.RawData[i].AQSReadyInd == true ? "background-color:#85c788" : "background-color:#ffa9a9")">
                                        @if (@Model.RawData[i].AQSReadyInd == true)
                                        {
                                            <text>Y</text>
                                        }
                                        else
                                        {
                                            <text>N</text>
                                        }
                                    </td>
                                    <td style="@(Model.RawData[i].LVL1_VAL_IND == true ? "background-color:#85c788" : "")">
                                        @Html.DisplayFor(model => model.RawData[i].LVL1_VAL_USER)
                                        @string.Format("{0:d}", Model.RawData[i].LVL1_VAL_DT)
                                    </td>
                                    <td style="@(Model.RawData[i].LVL2_VAL_IND == true ? "background-color:#85c788" : "")">
                                        @Html.DisplayFor(model => model.RawData[i].LVL2_VAL_USER)
                                        @string.Format("{0:d}", Model.RawData[i].LVL2_VAL_DT)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => model.RawData[i].NOTES)
                                        <a href="#modal-hist" data-toggle="modal" data-id="@Model.RawData[i].DATA_RAW_IDX" class="modal-hist" style="display: inline-block;"> <i class="fa fa-comments-o text-muted"></i></a>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        }

        @using (Html.BeginForm("DataReview2", "Data", FormMethod.Post, new { @id = "norepostform", @class = "m-b-sm" }))
        {
            @Html.HiddenFor(model => model.selMon.T_QREST_MONITORS.MONITOR_IDX)
            @Html.HiddenFor(model => model.selDtStart)
            @Html.HiddenFor(model => model.selDtEnd)
            @Html.HiddenFor(model => model.selDuration)
            @Html.HiddenFor(model => model.selMon.ORG_ID)
            @Html.HiddenFor(model => model.selMode)


            <!-- START EDIT MODAL  -->
            <div class="modal " id="modal-form1" style="display: none" aria-hidden="true">
                <div class="modal-dialog">
                    @Html.AntiForgeryToken()
                    <div class="modal-content" style="min-height:450px;">
                        <div class="modal-header">
                            <h4 style="float: left" class="modal-title">Bulk Edit</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body no-padder">
                            <div class="alert alert-danger m-b-none" style="border-radius:0">
                                <strong>Careful!</strong> This will update all rows you have selected.
                            </div>
                            <section class="panel panel-default m-b-none">
                                <header class="panel-heading bg-light">
                                    <ul class="nav nav-tabs nav-justified">
                                        <li class="active">
                                            <a href="#basic" data-toggle="tab">Basic</a>
                                        </li>
                                        @if (Model.secLvl2Ind == true)
                                        {
                                            <li class="">
                                                <a href="#advanced" data-toggle="tab">Advanced</a>
                                            </li>
                                        }
                                    </ul>
                                </header>
                                <div class="panel-body">
                                    <div class="tab-content">
                                        <div class="tab-pane active" id="basic">

                                            @if (Model.selDuration == "1")
                                            {
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label>AQS Null Codes</label>
                                                            <br />
                                                            @Html.DropDownListFor(model => model.editNullQual, Model.ddl_NullQual, "", new { @class = "form-control" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label>AQS Qualifiers</label>
                                                            <br />
                                                            @Html.DropDownListFor(model => model.editQual, Model.ddl_Qual, "", new { @class = "form-control", @multiple = "multiple", @style = "min-width:350px", @data_width = "100%" })
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.secLvl1Ind == true && Model.selDuration == "1")  //only show for hourly data and those with rights
                                            {
                                                <div class="row col-md-12">
                                                    <div class="form-group">
                                                        <input id="chkLvl1" type="checkbox" value="">
                                                        <label>Change Level 1 Review Status</label>
                                                        <br />
                                                        <div id="divlvl1" class="btn-group" data-toggle="buttons" style="display: none">
                                                            <label class="btn btn-sm btn-info active"> @Html.RadioButtonFor(x => x.editLvl1, "", new { id = "editLvl1_0" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> No Changes </label>
                                                            <label class="btn btn-sm btn-success"> @Html.RadioButtonFor(x => x.editLvl1, "Y", new { id = "editLvl1_1" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Mark Level 1 Complete </label>
                                                            <label class="btn btn-sm btn-danger"> @Html.RadioButtonFor(x => x.editLvl1, "N", new { id = "editLvl1_2" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Rollback Level 1 </label>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.secLvl2Ind == true && Model.selDuration == "1")  //only show for hourly data and those with rights
                                            {
                                                <div class="row col-md-12">
                                                    <div class="form-group">
                                                        <input id="chkLvl2" type="checkbox" value="">
                                                        <label>Change Level 2 Review Status</label>
                                                        <br />
                                                        <div id="divlvl2" class="btn-group" data-toggle="buttons" style="display: none">
                                                            <label class="btn btn-sm btn-info active"> @Html.RadioButtonFor(x => x.editLvl2, "", new { id = "editLvl2_0" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> No Changes </label>
                                                            <label class="btn btn-sm btn-success"> @Html.RadioButtonFor(x => x.editLvl2, "Y", new { id = "editLvl2_1" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Mark Level 2 Complete </label>
                                                            <label class="btn btn-sm btn-danger"> @Html.RadioButtonFor(x => x.editLvl2, "N", new { id = "editLvl2_2" })<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Rollback Level 2 </label>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div class="tab-pane" id="advanced">
                                            @if (User.IsInRole("GLOBAL ADMIN"))
                                            {
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label>Value</label>
                                                            <br />
                                                            <div class="input-group m-b">
                                                                @Html.TextBoxFor(model => model.editValue, new { @class = "form-control", @maxlength = "20" })
                                                                <span id="spnValChk" class="input-group-addon"> Remove Values @Html.CheckBoxFor(x => x.editValueBlank, new { @data_toggle = "tooltip", data_placement = "top", data_original_title = "Will remove value column data for the air records you have selected" }) </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <label>Delete</label>
                                                            <br />
                                                            <div class="input-group m-b">
                                                                <a class=" btn btn-rounded btn-xs btn-danger confirm-link">Delete Records!!</a>
                                                                <span id="spnValChk" class="input-group-addon btn-danger confirm-confirm" style="display:none"> Click Again to Confirm (then click save)! @Html.CheckBoxFor(x => x.editDeleteRecords) </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>QREST Flag</label>
                                                        <br />
                                                        <div class="input-group m-b">
                                                            @Html.TextBoxFor(model => model.editFlag, new { @class = "form-control", @maxlength = "5" })
                                                            <span id="spnValChk" class="input-group-addon"> Remove QREST Flags @Html.CheckBoxFor(x => x.editFlagBlank, new { @data_toggle = "tooltip", data_placement = "top", data_original_title = "Will remove any QREST flags for the air records you have selected" }) </span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>Unit Code</label>
                                                        <br />
                                                        @Html.DropDownListFor(model => model.editUnitCode, Model.ddl_ParUnits, "", new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    <label>Notes</label>
                                                    <br />
                                                    @Html.TextAreaFor(model => model.editNotes, new { @class = "form-control", @style = "width:100%", @maxlength = "100" })
                                                    @Html.ValidationMessageFor(model => model.editNotes)
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                            </section>

                        </div>
                        <div class="modal-footer">
                            <button id="btnSave" class="btn btn-primary">Save</button>
                            <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- END EDIT MODAL -->

        }




    </div>
</section>



<!-- START HISTORY LOG MODAL  -->
<div class="modal fade" id="modal-hist" style="display: none;" aria-hidden="true">
    <div class="modal-dialog" style="width:600px">

        <div class="modal-content">
            <div class="modal-header">
                <h4 style="float: left" class="modal-title">Notes Log</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <input type="hidden" id="hourz" name="hourz" value="">
                        <table id="gridLog" class="table table-striped table-bordered" style="width:100%; ">
                            <thead>
                                <tr>
                                    <th>DateTime (UTC)</th>
                                    <th>Note</th>
                                    <th>By</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a id="lnkLogDL" class="btn btn-primary pull-left" data-root="@Url.Action("HourlyLogFileDownload")" href="@Url.Action("HourlyLogFileDownload")"><i class="fa fa-download"></i> Download Log</a>
                <button class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- END EDIT MODAL -->

@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/canvasjs")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/select2")

<script type="text/javascript">
    var table;
    $(document).ready(function () {

        //toggle visibility of LVL1 update
        $("#chkLvl1").click(function () {
            if ($(this).is(":checked")) {
                $("#divlvl1").show();
                $("#editLvl1_1").prop("checked", true);
                $("#editLvl1_0").parent().removeClass("active");
                $("#editLvl1_1").parent().addClass("active");
                $("#editLvl1_2").parent().removeClass("active");

            } else {
                $("#divlvl1").hide();
                $("#editLvl1_0").prop("checked", true);
                $("#editLvl1_0").parent().addClass("active");
                $("#editLvl1_1").parent().removeClass("active");
                $("#editLvl1_2").parent().removeClass("active");
            }
        });

        //toggle visibility of LVL2 update
        $("#chkLvl2").click(function () {
            if ($(this).is(":checked")) {
                $("#divlvl2").show();
                $("#editLvl2_1").prop("checked", true);
                $("#editLvl2_0").parent().removeClass("active");
                $("#editLvl2_1").parent().addClass("active");
                $("#editLvl2_2").parent().removeClass("active");
            } else {
                $("#divlvl2").hide();
                $("#editLvl2_0").prop("checked", true);
                $("#editLvl2_0").parent().addClass("active");
                $("#editLvl2_1").parent().removeClass("active");
                $("#editLvl2_2").parent().removeClass("active");
            }
        });

        moment.updateLocale(moment.locale(), { invalidDate: "" });

        table = $('#gridData').DataTable({
            "scrollY": "400px",
            "scrollCollapse": true,
            "paging": false,
            "searching": false,
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 0
            },
                { orderable: false, targets: 2 },
                { orderable: false, targets: 3 },
                { orderable: false, targets: 4 }
            ],
            select: {
                style: 'os',
                selector: 'td:first-child'
            },
            order: [[1, 'asc']]
        });

        var dataPointsA = [], dataPointsSupp1 = [], dataPointsSupp2 = [];
        var stripLinesA = [];  //used for shading AQS Null
        var parName, parNameSupp1, parNameSupp2;
        var chart, chart1, chart2;

        @if (Model.RawData != null && Model.RawData.Count > 0)
        {
            <text>parName = '@Model.RawData[0].PAR_NAME (' + '@Model.RawData[0].UNIT_DESC' + ')';</text>

            foreach (var item in Model.RawData)
            {
                <text>addPoint('@item.DATA_DTTM', '@item.DATA_VALUE', '@item.VAL_CD', '@item.VAL_IND', '@item.AQS_NULL_CODE', dataPointsA, stripLinesA);
                </text>
            }
        }

        @if (Model.SuppData1 != null && Model.SuppData1.Count > 0) {

            <text>parNameSupp1 = '@Model.SuppData1[0].PAR_NAME (' + '@Model.SuppData1[0].UNIT_DESC' + ')';</text>

            foreach (var item in Model.SuppData1)
            {
                <text>addPoint('@item.DATA_DTTM', '@item.DATA_VALUE', '@item.VAL_CD', '@item.VAL_IND', null, dataPointsSupp1, null);
                </text>
            }
        }

        @if (Model.SuppData2 != null && Model.SuppData2.Count > 0) {

            <text>parNameSupp2 = '@Model.SuppData2[0].PAR_NAME (' + '@Model.SuppData2[0].UNIT_DESC' + ')';</text>

            foreach (var item in Model.SuppData2)
            {
                <text>addPoint('@item.DATA_DTTM', '@item.DATA_VALUE', '@item.VAL_CD', '@item.VAL_IND', null, dataPointsSupp2, null);
                </text>
            }
        }

        function addPoint(xx, yy, zz, vv, aqsnull, array, stripLineArray) {
            var lcolor = "#67B347";
            if (vv == "False")
                lcolor = "#A5A5A5";
            else if (yy == "FEW")
                lcolor = "#ffee8c";
            else if (zz == "MIN")
                lcolor = "#d32d41";
            else if (zz == "MAX")
                lcolor = "#d32d41";
            else if (zz == "JUMP")
                lcolor = "#6F2DA7";
            else if (zz == "STUCK")
                lcolor = "#6F2DA7";

            array.push({
                x: new Date(xx),
                y: (yy == "FEW" || aqsnull) ? 0 : Number(yy),
                lineColor: lcolor,
                color: lcolor
            });

            if (aqsnull) {
                stripLineArray.push({
                    startValue: new Date(moment(xx).add(-30,'minutes')),
                    endValue: new Date(moment(xx).add(30, 'minutes')),
                    color: "#ffcfcf"
                });
            }
        }

        chart = new CanvasJS.Chart("chartContainer", {
            zoomEnabled: true,
            animationEnabled: true,
            exportEnabled: true,
            title: {
                text: parName
            },

            axisX: {
                stripLines: stripLinesA,
                labelAutoFit: true,
                valueFormatString: "M/D/YYYY HH:mm",
                labelFormatter: function (e) {
                    return CanvasJS.formatDate(e.value, xaxisformat(dataPointsA.length));
                },
                gridThickness: 1,
                interval: 1,
                intervalType: xaxisintervaltype(dataPointsA.length),
            },
            toolTip: {
                contentFormatter: function (e) {
                    return CanvasJS.formatDate(e.entries[0].dataPoint.x, "MM/DD/YYYY HH:mm") + ": <strong style='color:green'>" + e.entries[0].dataPoint.y + " " + units() + "</strong>";
                }
            },
            data: [{
                type: "column",
                connectNullData: true,
                xValueType: "dateTime",
                xValueFormatString: "MM/DD/YYYY HH:mm",
                name: "line1",
                dataPoints: dataPointsA
            }],
            rangeChanging: function (e) {
                //change axis format based on zoom
                if (e.trigger === "zoom" || e.trigger === "reset") {
                    var len1 = (e.axisX[0].viewportMaximum - e.axisX[0].viewportMinimum) / 1000 / 60 / 60;
                    if (len1 == 0) len1 = dataPointsA.length;

                    e.chart.options.axisX.labelFormatter = function (e) {
                        return CanvasJS.formatDate(e.value, xaxisformat(len1));
                    };
                    e.chart.options.axisX.intervalType = xaxisintervaltype(len1);
                }
            },
            rangeChanged: function (e) {

                //show/hide grid rows based on zoomed chart
                var x1 = moment(e.axisX[0].viewportMinimum).format('MM-DD-YYYY HH:mm');
                var x2 = moment(e.axisX[0].viewportMaximum).format('MM-DD-YYYY HH:mm');

                $('#gridData tbody tr').each(function (index, element) {
                    rowdt = $(this).attr('data-date');
                    rowdt = new Date(rowdt);
                    x1d = new Date(x1);
                    x2d = new Date(x2);
                    if (rowdt.getTime() < x1d.getTime() || rowdt.getTime() > x2d.getTime()) {
                        $(this).css('display', 'none');
                    }
                    else {
                        $(this).css('display', '');
                    }
                });

                //synchronize supp chart with first chart
                if (chart1 != null) {
                    if (!chart1.options.axisX)
                        chart1.options.axisX = {};

                    if (e.trigger === "reset") {
                        chart1.options.axisX.viewportMinimum = chart1.options.axisX.viewportMaximum = null;
                    }
                    else {
                        chart1.options.axisX.viewportMinimum = e.axisX[0].viewportMinimum;
                        chart1.options.axisX.viewportMaximum = e.axisX[0].viewportMaximum;
                    }
                    chart1.render();
                }

                if (chart2 != null) {
                    if (!chart2.options.axisX)
                        chart2.options.axisX = {};

                    if (e.trigger === "reset") {
                        chart2.options.axisX.viewportMinimum = chart2.options.axisX.viewportMaximum = null;
                    }
                    else {
                        chart2.options.axisX.viewportMinimum = e.axisX[0].viewportMinimum;
                        chart2.options.axisX.viewportMaximum = e.axisX[0].viewportMaximum;
                    }
                    chart2.render();
                }
            }
        });


        function xaxisformat(hrs) {
            return (hrs < 25 ? "HH:mm" : "MM/DD");
        }

        function xaxisintervaltype(hrs) {
            return (hrs < 25 ? "hour" : "day");
        }

        function units() {
            return '@((Model.RawData!=null && Model.RawData.Count>0)? Model.RawData[0].UNIT_DESC: "")';
        }


        //hide chart if no data
        if (dataPointsA.length > 0) {
            $("#chartContainer").show();
            $("#chartContainer").css("height", "320px");
        }
        else
            $("#chartContainer").hide();

        chart.render();

        //handling chart visibility
        $('#chartContainer').on("shown.bs.collapse", function () {
            $("#chartContainer").height(320);
        });
        $('#chartContainerSupp1').on("shown.bs.collapse", function () {
            $("#chartContainerSupp1").height(160);
        });
        $('#chartContainerSupp2').on("shown.bs.collapse", function () {
            $("#chartContainerSupp2").height(160);
        });

        //handling grid visibility
        $("#btnChartToggle").bind('click', function () {
            if ($('#gridContainer').is(':visible') && $('#chartContainer').is(':visible')) {
                $(".dataTables_scrollBody").css("maxHeight", "550px");
            }
            else if ($('#gridContainer').is(':visible') && $('#chartContainer').is(':visible')==false) {
                $(".dataTables_scrollBody").css("maxHeight", "400px");
            }
        });

        //supp parameters
        if (dataPointsSupp1.length > 0) {
            chart1 = new CanvasJS.Chart("chartContainerSupp1", {
                zoomEnabled: false,
                animationEnabled: true,
                exportEnabled: true,
                title: {
                    text: parNameSupp1
                },
                toolTip: {
                    contentFormatter: function (e) {
                        return CanvasJS.formatDate(e.entries[0].dataPoint.x, "MM/DD/YYYY HH:mm") + ": <strong style='color:green'>" + e.entries[0].dataPoint.y + " " + units() + "</strong>";
                    }
                },
                axisX: {
                    labelAutoFit: true,
                    valueFormatString: "M/D/YYYY HH:mm",
                    labelFormatter: function (e) {
                        return CanvasJS.formatDate(e.value, xaxisformat(dataPointsSupp1.length));
                    },
                    gridThickness: 1,
                    interval: 1,
                    intervalType: xaxisintervaltype(dataPointsSupp1.length)
                },
                data: [{
                    type: "column",
                    connectNullData: true,
                    xValueType: "dateTime",
                    xValueFormatString: "MM/DD/YYYY HH:mm",
                    name: "line2",
                    dataPoints: dataPointsSupp1
                }]
            });

            chart1.render();
        }

        if (dataPointsSupp2.length > 0) {
            chart2 = new CanvasJS.Chart("chartContainerSupp2", {
                zoomEnabled: false,
                animationEnabled: true,
                exportEnabled: true,
                title: {
                    text: parNameSupp2
                },
                toolTip: {
                    contentFormatter: function (e) {
                        return CanvasJS.formatDate(e.entries[0].dataPoint.x, "MM/DD/YYYY HH:mm") + ": <strong style='color:green'>" + e.entries[0].dataPoint.y + " " + units() + "</strong>";
                    }
                },
                axisX: {
                    labelAutoFit: true,
                    valueFormatString: "M/D/YYYY HH:mm",
                    labelFormatter: function (e) {
                        return CanvasJS.formatDate(e.value, xaxisformat(dataPointsSupp2.length));
                    },
                    gridThickness: 1,
                    interval: 1,
                    intervalType: xaxisintervaltype(dataPointsSupp2.length)
                },
                data: [{
                    type: "column",
                    connectNullData: true,
                    xValueType: "dateTime",
                    xValueFormatString: "MM/DD/YYYY HH:mm",
                    name: "line2",
                    dataPoints: dataPointsSupp2
                }]
            });

            chart2.render();
        }

        //initialize select2
        $('#editQual').select2();

        //toggles display of Edit button based on whether there are any rows selected
        table.on('select', function (e, dt, type, indexes) {
            $('#divBulk').show();
        });
        table.on('deselect', function (e, dt, type, indexes) {
            if (table.rows({ selected: true }).count() == 0)
                $('#divBulk').hide();
        });


    });


    //select/unselect all (mark all visible rows in datatable as selected)
    $('#selectAll').click(function (e) {
        if (this.checked) {
            $('#gridData').find('tbody > tr:visible').addClass("selected");
            $('#divBulk').show();
        }
        else {
            $('#gridData').find('tr').removeClass("selected");
            $('#divBulk').hide();
        }
    });


    //clear textbox when checkbox checked
    $('#editValueBlank').on('change', function () {
        if (this.checked) {
            $('#editValue').val('');
            $('#spnValChk').addClass('btn-danger');
        }
        else {
            $('#spnValChk').removeClass('btn-danger');
        }
    });


    //log history click
    $('.modal-hist').on('click', function () {
        $("#hourz").val($(this).data('id'));

        $("#lnkLogDL").attr('href', $("#lnkLogDL").data('root') + '/' + $(this).data('id'));

        $('#gridLog').DataTable().clear().destroy();

        // datatable initialization
        $("#gridLog").DataTable({
            "responsive": true,
            "serverSide": true,
            "ordering": false,
            "processing": true,
            "orderMulti": false,
            "lengthChange": false,
            "paging": false,
            "info": false,
            "searching": false,
            "ajax": {
                "url": "@Url.Action("HourlyLogData", "Data")",
                "type": "POST",
                "datatype": "json",
                "data": function (d) {
                    return $.extend({}, d, {
                        "id": $('#hourz').val()
                    });
                }
            },
            "order": [[0, "desc"]],
            "columns": [
                {
                    "data": "MODIFY_DT",
                    "name": "MODIFY_DT",
                    "autoWidth": true,
                    render: function (d) {
                        return moment.utc(d).format("MM/DD/YYYY hh:mm A ");
                    }
                },
                { "data": "NOTES", "name": "NOTES", "autoWidth": true },
                { "data": "USER_NAME", "name": "USER_NAME", "autoWidth": true }
            ]
        });
    })


    //javascript before submit update data form to pass the checked IDs into the form
    $('#btnSave').on('click', function (e) {
        e.preventDefault();
        var arrayOfValues = [];
        $("input[id=editRawDataIDX]").remove();

        $('#gridData tr.selected').each(function () {
            arrayOfValues.push($(this).find('.id1').val());
        });

        $.each(arrayOfValues, function (index, val) {
            $("#norepostform").append('<input id="editRawDataIDX" name="editRawDataIDX" type="hidden" value="' + val + '">');
        });

        $("#norepostform").submit();
    });


    //make user clicks confirm when marking records for deletion
    $(document).on('click', 'a.confirm-link', function () {
        var deleteLink = $(this);
        deleteLink.hide();
        var confirmButton = deleteLink.siblings(".confirm-confirm");
        confirmButton.delay(100).fadeIn(300);
    })

</script>
}

