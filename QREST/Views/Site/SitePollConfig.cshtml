@using QREST.App_Logic.BusinessLogicLayer
@model QREST.Models.vmSiteSitePollConfig
@{
    ViewBag.Title = "Site Automated Polling Config";
    ViewBag.HelpLink = "Polling-Configuration";
}

<section class="hbox">
    <section class="aside-md panel panel-qrest" id="subNav" style="border-radius: 4px 0px 0px 4px; width:180px">
        <header class="panel-heading font-bold" style="border-right: 1px solid #fff">Polling Templates</header>
        <ul class="nav">
            @if (Model.ConfigList != null)
            {
                foreach (var item in Model.ConfigList)
                {
                    <li class="b-b b-light">
                        <a href="@Url.Action("SitePollConfig", "Site", new { id = item.SITE_IDX, configid = item.POLL_CONFIG_IDX })" class="@(item.POLL_CONFIG_IDX == Model.editPOLL_CONFIG_IDX ? "master-active" : "")">
                            @if (item.ACT_IND == true)
                            {<span class="label label-success pull-right"> Active</span>}@item.CONFIG_NAME
                        </a>
                    </li>
                }
            }
        </ul>
        <footer>
            <a href="@(Url.Action("SitePollConfig", "Site", new { id= Model.SITE_IDX, n = 1 }))" class="btn btn-primary btn-block " style="border-radius:0"><i class="fa fa-plus"></i> Add Polling Config</a>
        </footer>
    </section>

    @if (Model.editPOLL_CONFIG_IDX != null)
    {
        <section class="panel panel-qrest" style="border-radius: 0px 4px 4px 0px;">
            <header class="panel-heading font-bold">
                Details
                @if (Model.editLOGGER_TYPE != null)
                {
                    <button type="button" class="btn btn-xs btn-info pull-right dropdown-toggle" data-toggle="dropdown">Options <i class="caret"></i></button>
                    <ul class="dropdown-menu pull-right btn-info">
                        @if (Model.editLOGGER_TYPE == "WEATHER_PWS")
                        {
                            <li data-value="2">
                                <a id="lnkDownload" href="@Url.Action("LoggerPollManual", new { id = Model.editPOLL_CONFIG_IDX })">Manual Poll and Store </a>
                            </li>
                        }
                        else
                        {
                            <li data-value="1">
                                <a id="lnkPing" href="@Url.Action("SitePollPing", "Site", new { id=Model.editPOLL_CONFIG_IDX })">Ping Connection</a>
                            </li>
                        }
                        <li data-value="2">
                            <a id="lnkDownload" href="@Url.Action("DownloadTemplate", "Data", new { id=Model.editPOLL_CONFIG_IDX })">Download File Template</a>
                        </li>
                        <li data-value="2">
                            <a id="lnkViewChangeLog" href="@Url.Action("ViewChangeLog", new { id=Model.editPOLL_CONFIG_IDX })">View Change Log</a>
                        </li>
                        @if (Model.editACT_IND == false)
                        {
                            <li class="divider"></li>
                            <li data-value="4">
                                <a href="#" class="delete-link">Delete</a>
                                <a href="#" class="delete-confirm" style="display:none" data-delete-id="@Model.editPOLL_CONFIG_IDX" data-delete-path="" data-delete-p="/Site/SitePollConfigDelete" data-success-url="/Site/SiteList">
                                    <b>Confirm Delete</b>
                                </a>
                            </li>
                        }
                    </ul>
                }
            </header>
            <div class="panel-body">

                @if (ViewBag.PollError == true)
                {
                    <div class="alert alert-danger">
                        <b>Warning:</b> QREST will not poll this site until Duration, Delimiter, Local Time Zone, Date Column, Time Column, and at least 1 column mapping are defined.
                    </div>
                }

                @using (Html.BeginForm("SitePollConfig", "Site", FormMethod.Post, new { @id = "norepostform", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.editPOLL_CONFIG_IDX)
                    @Html.HiddenFor(model => model.SITE_IDX)
                    <div class="row no-pad">
                        <div class="col-md-4">
                            <section class="panel panel-info panel-noborder">
                                <header class="panel-heading font-bold">
                                    Connectivity
                                </header>
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                @Html.LabelForRequired(m => m.editCONFIG_NAME, "Config Name", new { @class = "control-label" })
                                                @Html.TextBoxFor(model => model.editCONFIG_NAME, new { @class = "form-control", @maxlength = "20" })
                                                @Html.ValidationMessageFor(model => model.editCONFIG_NAME)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                @Html.LabelForRequired(m => m.editLOGGER_TYPE, "Logger Type", new { @class = "control-label" })
                                                @Html.DropDownListFor(model => model.editLOGGER_TYPE, Model.ddl_LoggerType, "", new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.editLOGGER_TYPE)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row loggerOnly">
                                        <div class="col-md-6 hideCampbell">
                                            <div class="form-group">
                                                @Html.LabelForRequired(m => m.editLOGGER_SOURCE, "Logger Source", new { @class = "control-label" })
                                                @Html.TextBoxFor(model => model.editLOGGER_SOURCE, new { @class = "form-control", @maxlength = "150" })
                                                @Html.ValidationMessageFor(model => model.editLOGGER_SOURCE)
                                                <span id="hlpIP" class="help-block">The TCP/IP address (X.X.X.X) of the instrument.</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6 hideWeather hideCampbell">
                                            <div class="form-group ">
                                                @Html.LabelForRequired(m => m.editLOGGER_PORT, "Port", new { @class = "control-label" })
                                                @Html.TextBoxFor(model => model.editLOGGER_PORT, new { @class = "form-control", @maxlength = "5" })
                                                @Html.ValidationMessageFor(model => model.editLOGGER_PORT)
                                                <span class="help-block">Port used by the instrument.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row loggerOnly">
                                        <div class="col-md-6 hideWeather hideCampbell">
                                            <div class="form-group ">
                                                Username
                                                @Html.TextBoxFor(model => model.editLOGGER_USERNAME, new { @class = "form-control", @maxlength = "150" })
                                                @Html.ValidationMessageFor(model => model.editLOGGER_USERNAME)
                                                <span class="help-block">If your instrument only requires a password, then leave this blank.</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6 hideCampbell">
                                            <div class="form-group">
                                                Password
                                                @Html.PasswordFor(model => model.editLOGGER_PASSWORD, new { @class = "form-control", @maxlength = "150", @placeholder = "***************" })
                                                @Html.ValidationMessageFor(model => model.editLOGGER_PASSWORD)
                                                <span id="hlpPWD" class="help-block">Password (aka Level 1 password) for accessing the logger.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row loggerOnly">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                Last Run Time
                                                @Html.TextBoxFor(model => model.POLLING_LAST_RUN_DT, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.POLLING_LAST_RUN_DT)
                                                <span class="help-block">The last time QREST polled this site.</span>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                Next Run Time
                                                @Html.TextBoxFor(model => model.POLLING_NEXT_RUN_DT, new { @class = "form-control", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.POLLING_NEXT_RUN_DT)
                                                <span class="help-block">Next time the site will be polled.</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </section>
                        </div>

                        @if (Model.editLOGGER_TYPE != null)
                        {
                            <div class="col-md-8">
                                <section class="panel panel-info panel-noborder" style="border-left-width:2px;">
                                    <header class="panel-heading font-bold">Data Format</header>
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group ">
                                                            Sample Duration
                                                            @Html.DropDownListFor(model => model.editRAW_DURATION_CODE, Model.ddl_LoggerDuration, "", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.editRAW_DURATION_CODE)
                                                            <span class="help-block">Time interval for data output from the data logger.</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-12 hideWeather">
                                                        <div class="form-group">
                                                            Delimiter
                                                            @Html.DropDownListFor(model => model.editDELIMITER, Model.ddl_LoggerDelimiter, "", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.editDELIMITER)
                                                            <span class="help-block">How columns of data are separated in the logger output file</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            Local Time Zone
                                                            @Html.DropDownListFor(model => model.editLOCAL_TIMEZONE, Model.ddl_TimeZone, "", new { @class = "form-control", @readonly="readonly" })
                                                            @Html.ValidationMessageFor(model => model.editLOCAL_TIMEZONE)
                                                            <span class="help-block">Site's local time zone (set at site page)</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            Date/Time Output Type
                                                            @Html.DropDownListFor(model => model.editTIME_POLL_TYPE, Model.ddl_LoggerTimeType, "", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.editTIME_POLL_TYPE)
                                                            <span class="help-block">How is date/time output from logger?</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 hideWeather">
                                                        <div class="form-group">
                                                            Date Column
                                                            @Html.TextBoxFor(model => model.editDATE_COL, new { @class = "form-control cleave-num", @maxlength = "2" })
                                                            @Html.ValidationMessageFor(model => model.editDATE_COL)
                                                            <span class="help-block">Column number in which date is stored.</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6 hideWeather">
                                                        <div class="form-group">
                                                            Date Format
                                                            @Html.DropDownListFor(model => model.editDATE_FORMAT, Model.ddl_LoggerDate, "", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.editDATE_FORMAT)
                                                            <span class="help-block">Format of DATE field on data logger file.</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3 hideWeather">
                                                        <div class="form-group">
                                                            Time in Separate Column?
                                                            <input type="checkbox" id="chkDateTimeSame" name="chkDateTimeSameName" class="form-control">
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3 hideWeather">
                                                        <div class="form-group">
                                                            Time Column
                                                            @Html.TextBoxFor(model => model.editTIME_COL, new { @class = "form-control cleave-num", @maxlength = "2" })
                                                            @Html.ValidationMessageFor(model => model.editTIME_COL)
                                                            <span class="help-block">Column # in which time is stored.</span>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6 hideWeather">
                                                        <div class="form-group">
                                                            Time Format
                                                            @Html.DropDownListFor(model => model.editTIME_FORMAT, Model.ddl_LoggerTime, "", new { @class = "form-control" })
                                                            @Html.ValidationMessageFor(model => model.editTIME_FORMAT)
                                                            <span class="help-block">Format of TIME field on data logger file.</span>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <h4 style="margin-top:0">Column Mapping</h4>
                                                <div class="table-responsive">
                                                    <div class="table-responsive">
                                                        <table id="gridData" class="table table-striped table-bordered" data-ride="datatables" style="width:100%">
                                                            <thead>
                                                                <tr>
                                                                    <th></th>
                                                                    <th></th>
                                                                    <th>Col</th>
                                                                    <th>Sum</th>
                                                                    <th>Prec</th>
                                                                    <th>Par / Method</th>
                                                                </tr>
                                                            </thead>
                                                        </table>
                                                    </div>
                                                </div>
                                                @if (Model.editACT_IND == false)
                                                {
                                                    <a type="button" id="add-it" href="#modal-form" data-toggle="modal" class="add-it btn btn-sm btn-primary modal-it m-t-sm"><i class="fa fa-plus"></i> Add</a>
                                                }
                                            </div>
                                        </div>

                                    </div>
                                </section>
                            </div>
                        }
                    </div>
                    if (Model.editACT_IND == false)
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group ">
                                    Describe Changes Being Made (optional)
                                    @Html.TextAreaFor(model => model.editPOLL_LOG_DESC, new { @class = "form-control", @maxlength = "150" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div id="telemetrySource" class="col-md-12">
                                <div class="form-group ">
                                    @Html.CheckBoxFor(model => model.editACT_IND, new { @class = "checkbox-inline checkbox-lg" })
                                    <label class="label-lg font-bold">Set this config to Active (online) for polling this site</label>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-12">
                            @if (Model.editACT_IND == false)
                            {
                                <button id="btnSave" type="submit" disabled class="btn btn-primary">Save</button>
                            }
                            else
                            {
                                <a id="lnkOffline" href="@Url.Action("SitePollOffline", "Site", new { id=Model.editPOLL_CONFIG_IDX })" class="btn btn-danger">Take Offline &amp; Allow Editing</a>
                            }
                            <a class=" btn btn-default" href="@Url.Action("SiteEdit", new { id = Model.SITE_IDX })">Back to Site Screen</a>
                        </div>
                    </div>
                }
            </div>
        </section>
    }
</section>


<!-- START MODAL FORM  -->
<form class="modal fade" id="modal-form" style="display: none;" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 style="float: left" class="modal-title">Edit Setting</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            @Html.HiddenFor(model => model.editPOLL_CONFIG_DTL_IDX)
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label>Monitor</label>
                            @Html.DropDownListFor(model => model.editMONITOR_IDX, Model.ddl_Monitors, "", new { @class = "form-control" })
                            <span class="field-validation-valid" data-valmsg-for="editMONITOR_IDX" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Column</label>
                            @Html.TextBoxFor(model => model.editCOL, new { @class = "form-control", @maxlength = "2" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Summary Type</label>
                            @Html.DropDownListFor(model => model.editSUM_TYPE, Model.ddl_SumType, "", new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Rounding Decimals</label>
                            @Html.DropDownListFor(model => model.editROUNDING, Model.ddl_Rounding, "", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <button type="button" class="btn btn-xs btn-warning btn-rounded m-l-xs" data-toggle="collapse" data-target="#advanced">Advanced Options</button>
                <div id="advanced" class="row collapse">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Adjustment Factor</label>
                            @Html.TextBoxFor(model => model.editADJUST_FACTOR, new { @class = "form-control", @maxlength = "10" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                @if (Model.editACT_IND == false)
                {
                    <button id="btnSaveDtl" type="submit" class="btn btn-primary">Save</button>
                }
                <button class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</form>
<!-- END MODAL FORM -->



@section scripts {
    @Scripts.Render("~/bundles/confirm-delete")
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/areyousure")

    <script type="text/javascript">
        // Enable dirtyforms
        $('#norepostform').dirtyForms();
        // Enable/disable the submit button when the state transitions between dirty and clean.
        $('form').on('dirty.dirtyforms clean.dirtyforms', function (ev) {
            if (ev.type === 'dirty') {
                $("#btnSave").prop("disabled", false);
                $(".delete-section").hide();     
                $(".modal-it").hide();     
                $("#gridData").css({"z-index":2,"opacity":.5});
            } else {
                $("#btnSave").prop("disabled", true);
                $(".delete-section").show();     
                $(".modal-it").show();     
                $("#gridData").css({"z-index":2,"opacity":1});
            }
        });

        $(document).ready(function () {

            //make all textboxes disabled if poll is online
            if ($('#lnkOffline').length)
            {
                $("#norepostform :input").prop("disabled", true);
            }

            // datatable initialization
            $("#gridData").DataTable({
                "responsive": true,
                "serverSide": true,
                "processing": true,
                "orderMulti": false,
                "lengthChange": false,
                "paging": false,
                "info": false,
                "searching": false,
                "ajax": {
                    "url": "@Url.Action("SitePollConfigDtlData", "Site")",
                    "type": "POST",
                    "datatype": "json",
                    "data": function (d) {
                        return $.extend({}, d, {
                            "pollid": $('#editPOLL_CONFIG_IDX').val()
                        });
                    }
                },
                "columnDefs":
                    [{
                        "targets": [0],
                        "visible": false,
                    }],
                "columns": [
                    { "data": "POLL_CONFIG_DTL_IDX", "name": "POLL_CONFIG_DTL_IDX", "autoWidth": true },
                    {
                        "render": function (data, type, row) {
                            var txt = '<a href="#modal-form" data-toggle="modal" data-id=' + row.POLL_CONFIG_DTL_IDX + ' data-col=' + row.COL + ' data-sum=' + row.SUM_TYPE + ' data-monid=' + row.MONITOR_IDX + ' data-rounding=' + row.ROUNDING + ' data-adjust=' + row.ADJUST_FACTOR + ' class="btn btn-rounded btn-xs btn-primary modal-it" style="display: inline-block;"> <i class="fa fa-pencil"></i> Edit</a>';
                            var txt2 = '<div class="delete-section" style="display:inline-block;"><a class="btn btn-rounded btn-xs btn-danger delete-link"><i class="fa fa-times"></i></a><div class="btn btn-rounded btn-xs btn-warning delete-confirm" style="display:none" data-delete-id="' + row.POLL_CONFIG_DTL_IDX + '" data-delete-path="@(Url.Content("~/"))" data-delete-p="/Site/SitePollConfigDtlDelete"><b>Confirm Delete</b></div></div>';
                            var act = '@Model.editACT_IND';
                            if (act == 'True')
                                return txt;
                            else
                                return txt + txt2;
                        }
                    },
                    { "data": "COL", "name": "COL", "autoWidth": true },
                    { "data": "SUM_TYPE", "name": "SUM_TYPE", "autoWidth": true },
                    { "data": "ROUNDING", "name": "ROUNDING", "autoWidth": true },
                    {
                        "data": function (data, type, dataToSet) {
                            return data.PAR_CODE + " - " + data.PAR_NAME + "<br/>Method: " + data.METHOD_CODE + "<br/>POC: " + data.POC;
                        }, "name": "POC", "autoWidth": true
                    }
                ],
                "createdRow": function (row, data, dataIndex) {
                    $('td:eq(0)', row).css('width', '90px');
                    $('td:eq(0)', row).css('min-width', '90px');
                    $('td:eq(0)', row).css('padding-right', '0px');
                    $('td:eq(0)', row).css('white-space', 'nowrap');
                }
            });

            //hide fields if no logger
            loggerSpecificShowHide();


            //******************datetime same col*******************
            $('#chkDateTimeSame').prop('checked', $('#editDATE_COL').val() !== $('#editTIME_COL').val());   //init val on page load
            $('#editTIME_COL').attr('readonly', $('#editDATE_COL').val() === $('#editTIME_COL').val());

            $('#chkDateTimeSame').on('click', function () {
                if (this.checked) {
                    $('#editTIME_COL').attr('readonly', false);
                } else {
                    $('#editTIME_COL').val($('#editDATE_COL').val());
                    $('#norepostform').data("dirty", true);
                    $("#norepostform").find("input").change();
                    $('#editTIME_COL').attr('readonly', true);
                }
            });

            $("#editDATE_COL").keyup(function () {
                if ($('#chkDateTimeSame').is(":checked") == false) {
                    $("#editTIME_COL").val($(this).val());
                }
            });


            //logger type value change
            $('#editLOGGER_TYPE').change(function () {
                loggerSpecificShowHide();
            });

            function loggerSpecificShowHide() {
                $("#hlpIP").text("The TCP/IP address (X.X.X.X) of the instrument.");
                $("#hlpPWD").text("Password (aka Level 1 password) for accessing the logger.");
                var xxx = $('#editLOGGER_TYPE').val();
                if (xxx == "NONE") {
                    $('.loggerOnly').hide();
                }
                else if (xxx == "WEATHER_PWS") {
                    $('.loggerOnly').show();
                    $('.hideWeather').hide();
                    $("#hlpIP").text("Weather Company station ID.");
                    $("#hlpPWD").text("API Key for Weather Company web service.");
                }
                else if (xxx == "CAMPBELL")
                {
                    $('.hideWeather').show();
                    $('.hideCampbell').hide();
                }
                else {
                    $('.loggerOnly').show();
                    $('.hideWeather').show();
                    $('.hideCampbell').show();
                }

                if (!$('#editLOGGER_PORT').val()) {
                    $('#editLOGGER_SOURCE').val("X.X.X.X");
                    $('#editLOGGER_PORT').val("0");
                }
            }

            //******************load column config modal*******************
            $(document).on('click', '.modal-it', function () {
                $("#editPOLL_CONFIG_DTL_IDX").val($(this).attr('data-id'));
                $("#editCOL").val($(this).attr('data-col'));
                $("#editSUM_TYPE").val($(this).attr('data-sum'));
                $("#editROUNDING").val($(this).attr('data-rounding'));
                $("#editMONITOR_IDX").val($(this).attr('data-monid'));
                if ($(this).attr('data-adjust'))
                    $("#editADJUST_FACTOR").val(($(this).attr('data-adjust')).replace('null', ''));
                else
                    $("#editADJUST_FACTOR").val('');
            });



            //******************submit modal*******************
            $("#modal-form").submit(function (e) {
                e.preventDefault();

                $.post('@Url.Action("SitePollConfigDtlEdit","Site")',
                    AddAntiForgeryToken({
                        configid: $("#editPOLL_CONFIG_IDX").val(),
                        configdtlid: $("#editPOLL_CONFIG_DTL_IDX").val(),
                        monid: $("#editMONITOR_IDX").val(),
                        col: $("#editCOL").val(),
                        sumtype: $("#editSUM_TYPE").val(),
                        rounding: $("#editROUNDING").val(),
                        adjustfactor: $("#editADJUST_FACTOR").val()
                    }))
                    .done(function (response) {
                        if (response.msg == "Success") {
                            toastr.success("Updated");
                            $('#modal-form').modal('toggle');
                            $('#gridData').DataTable().ajax.reload();
                        }
                        else
                            toastr.warning(response.msg);
                    }).fail(function (data) {
                        toastr.warning("Unable to save data");
                    });
            });



        });


        AddAntiForgeryToken = function (data) {
            data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
            return data;
        };

    </script>

}