@using QREST.App_Logic.BusinessLogicLayer
@model QREST.Models.vmSiteMonitorEdit
@{
    ViewBag.Title = "Edit Monitor";
    ViewBag.HelpLink = "Monitor-Management";
}

@using (Html.BeginForm("MonitorEdit", "Site", FormMethod.Post, new { @id = "norepostform", role = "form" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.MONITOR_IDX)
    @Html.HiddenFor(model => model.SITE_IDX)
    @Html.HiddenFor(model => model.PAR_METHOD_IDX)
    <div class="row">
        <div class="col-md-12">
            <section class="panel panel-qrest">
                <header class="panel-heading font-bold dirtyignore">
                    Monitor Details
                </header>
                <div class="panel-body">

                    @if (Model != null)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Site Name</label>
                                    @Html.TextBoxFor(model => model.SITE_NAME, new { @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @if (Model.MONITOR_IDX == null)
                            {
                                <div class="col-md-8">
                                    @Html.LabelForRequired(m => m.PAR_METHOD_IDX, "Parameter / Method", new { @class = "control-label" })
                                    <div class="input-group m-b">
                                        <span class="input-group-btn">
                                            <a id="add-it" href="#modal-form" data-toggle="modal" class="btn btn-info"><i class="fa fa-plus"></i> Search</a>
                                        </span>
                                        <input id="txtParMethodTemp" type="text" class="form-control" readonly="readonly">
                                    </div>
                                    @Html.ValidationMessageFor(model => model.PAR_METHOD_IDX)
                                </div>
                            }
                            else
                            {
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Parameter</label>
                                        @Html.TextBoxFor(model => model.PAR_NAME, new { @class = "form-control", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Method</label>
                                        <div class="input-group m-b">
                                            <span class="input-group-btn">
                                                <a href="@Url.Action("MonitorEditMethod", new { id = Model.MONITOR_IDX } )" class="btn btn-info">Change</a>
                                            </span>
                                            @Html.TextBoxFor(model => model.METHOD_CODE, new { @class = "form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForRequired(m => m.PAR_METHOD_IDX, "Unit Code", new { @class = "control-label" })
                                    @Html.DropDownListFor(model => model.COLLECT_UNIT_CODE, Model.ddl_Unit, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.COLLECT_UNIT_CODE)
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForRequired(m => m.POC, "POC", new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.POC, new { @class = "form-control", @maxlength = "4" })
                                    @Html.ValidationMessageFor(model => model.POC)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelForRequired(m => m.DURATION_CODE, "AQS Reporting Duration", new { @class = "control-label" })
                                    @Html.DropDownListFor(model => model.DURATION_CODE, Model.ddl_Ref_Duration, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DURATION_CODE)
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Collection Frequency</label>
                                    @Html.DropDownListFor(model => model.COLLECT_FREQ_CODE, Model.ddl_Ref_Coll_Freq, "", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.COLLECT_FREQ_CODE)
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </section>
        </div>

        @if (Model != null && Model.MONITOR_IDX != null)
        {
            <div class="col-md-12">
                <section class="panel panel-qrest">
                    <header class="panel-heading font-bold dirtyignore">
                        Alerts - Limits In Collection Units
                        <button type="button" class="btn btn-xs btn-info pull-right dropdown-toggle" data-toggle="dropdown">Options <i class="caret"></i></button>
                        <ul class="dropdown-menu pull-right btn-info">
                            <li data-value="1">
                                <a id="lnkReapply" href="#">Reapply QREST Default Limits</a>
                            </li>
                        </ul>
                    </header>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Minimum</label>
                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.ALERT_MIN_TYPE, Model.ddl_NMIN_HOURLY, "", new { @class = "form-control", @style = "min-width:80px", @data_toggle = "tooltip", @data_placement = "right", @data_original_title = "Select N to apply alert to n-minute data or H to apply to hourly data" })
                                        <span class="input-group-btn" style="width:100%">
                                            @Html.TextBoxFor(model => model.ALERT_MIN_VALUE, new { @class = "form-control", @maxlength = "6" })
                                        </span>
                                        <span id="unit1" class="input-group-addon"></span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ALERT_MIN_VALUE)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Maximum</label>
                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.ALERT_MAX_TYPE, Model.ddl_NMIN_HOURLY, "", new { @class = "form-control", @style = "min-width:80px", @data_toggle = "tooltip", @data_placement = "left", @data_original_title = "Select N to apply alert to n-minute data or H to apply to hourly data" })
                                        <span class="input-group-btn" style="width:100%">
                                            @Html.TextBoxFor(model => model.ALERT_MAX_VALUE, new { @class = "form-control", @maxlength = "6" })
                                        </span>
                                        <span id="unit2" class="input-group-addon">unit</span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ALERT_MAX_VALUE)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Amount Change (consecutive values)</label>
                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.ALERT_AMT_CHANGE_TYPE, Model.ddl_NMIN_HOURLY, "", new { @class = "form-control", @style = "min-width:80px", @data_toggle = "tooltip", @data_placement = "right", @data_original_title = "Select N to apply alert to n-minute data or H to apply to hourly data" })
                                        <span class="input-group-btn" style="width:100%">
                                            @Html.TextBoxFor(model => model.ALERT_AMT_CHANGE, new { @class = "form-control", @maxlength = "5" })
                                        </span>
                                        <span id="unit3" class="input-group-addon">unit</span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ALERT_AMT_CHANGE)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label># Stuck Values</label>

                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.ALERT_STUCK_TYPE, Model.ddl_HOURLY, "", new { @class = "form-control", @style = "min-width:80px", @data_toggle = "tooltip", @data_placement = "left", @data_original_title = "Select H to apply to hourly data or leave blank to skip this validation" })
                                        <span class="input-group-btn" style="width:100%">
                                            @Html.TextBoxFor(model => model.ALERT_STUCK_REC_COUNT, new { type = "number", @class = "form-control", min = "3", max = "3" })
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ALERT_STUCK_REC_COUNT)
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

            </div>
        }
    </div>
    <div class="row">
        <div class="col-md-12">
            @if (Model.CanEdit)
            {
                <button id="btnSave" type="submit" disabled class="btn btn-primary">Save</button>
            }

            @if (Model.refr == "m")
            {
                <a class=" btn btn-default" href="@Url.Action("MonitorList")">Back to Monitor List</a>
            }
            else
            {
                <a class=" btn btn-default" href="@Url.Action("SiteEdit", new { id = Model.SITE_IDX })">Back to Site</a>
            }
        </div>

    </div>

}

<!-- START MODAL FORM  -->
<div class="modal fade" id="modal-form" style="display: none;" aria-hidden="true">
    <div class="modal-dialog" style="width:90%">
        <div class="modal-content">
            <div class="modal-header">
                <h4 style="float: left" class="modal-title">Search and Select AQS Parameter / Method</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table id="gridData" class="table table-striped table-bordered" data-ride="datatables" style="width:100%">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Par</th>
                                <th>Par Name</th>
                                <th>Recording Mode</th>
                                <th>Method</th>
                                <th>Collection</th>
                                <th>Analysis</th>
                                <th>Ref Method</th>
                                <th>Equivalent Method</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<!-- END MODAL FORM -->



@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/areyousure")

    <script type="text/javascript">
        // Enable dirtyforms
        $('#norepostform').dirtyForms();
        // Enable/disable the submit button when the state transitions between dirty and clean.
        $('form').on('dirty.dirtyforms clean.dirtyforms', function (ev) {
            if (ev.type === 'dirty') {
                $("#btnSave").prop("disabled", false);
            } else {
                $("#btnSave").prop("disabled", true);
            }
        });

        $(document).ready(function () {

            // datatable initialization
            $("#gridData").DataTable({
                "responsive": true,
                "serverSide": true,
                "processing": true,
                "ordering": false,
                "lengthChange": false,
                "paging": true,
                "pageLength": 10,
                "pagingType": "full_numbers",
                "info": false,
                "searching": true,
                "dom": '<"pull-left"f><"pull-right"l>tip',
                "ajax": {
                    "url": "@Url.Action("RefParMethodData", "Site")",
                    "type": "POST",
                    "datatype": "json"
                },
                "columns": [
                    {
                        "render": function (data, type, row) {
                            return '<a data-id="' + row.T_QREST_REF_PAR_METHODS.PAR_METHOD_IDX
                                + '" data-par="' + row.PAR_NAME
                                + '" data-parcd="' + row.T_QREST_REF_PAR_METHODS.PAR_CODE
                                + '" data-unit="' + row.T_QREST_REF_PAR_METHODS.STD_UNIT_CODE
                                + '" data-meth="' + row.T_QREST_REF_PAR_METHODS.METHOD_CODE + '" class="btn btn-rounded btn-xs btn-primary par-meth-sel" style="display: inline-block;"> <i class="fa fa-plus"></i> Select</a>';
                        }
                    },
                    { "data": "T_QREST_REF_PAR_METHODS.PAR_CODE", "name": "T_QREST_REF_PAR_METHODS.PAR_CODE", "autoWidth": true },
                    { "data": "PAR_NAME", "name": "PAR_NAME", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.RECORDING_MODE", "name": "T_QREST_REF_PAR_METHODS.RECORDING_MODE", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.METHOD_CODE", "name": "T_QREST_REF_PAR_METHODS.METHOD_CODE", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.COLLECTION_DESC", "name": "T_QREST_REF_PAR_METHODS.COLLECTION_DESC", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.ANALYSIS_DESC", "name": "T_QREST_REF_PAR_METHODS.ANALYSIS_DESC", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.REFERENCE_METHOD_ID", "name": "T_QREST_REF_PAR_METHODS.REFERENCE_METHOD_ID", "autoWidth": true },
                    { "data": "T_QREST_REF_PAR_METHODS.EQUIVALENT_METHOD", "name": "T_QREST_REF_PAR_METHODS.EQUIVALENT_METHOD", "autoWidth": true }
                ]
            });

            //select a par/method
            $(document).on("click", ".par-meth-sel", function () {
                var unt = $(this).data('unit');
                $('#PAR_METHOD_IDX').val($(this).data('id'));
                $('#txtParMethodTemp').val($(this).data('parcd') + " - " + $(this).data('par') + " / " + $(this).data('meth'));

                //update unit dropdown
                var localityUrl = '@Url.Action("FetchUnits")';
                var localities = $('#COLLECT_UNIT_CODE');
                localities.empty();
                $.getJSON(localityUrl, { ID: $(this).data('parcd') }, function (data) {
                    if (!data) {
                        return;
                    }
                    localities.append($('<option></option>').val('-1').text('Please select'));
                    $.each(data, function (index, item) {
                        localities.append($('<option></option>').val(item.Value).text(item.Text));
                    });

                    $("#COLLECT_UNIT_CODE").val(unt);
                });

                //hide modal
                $('#modal-form').modal('toggle');
            });

            //sync units on page load
            syncunits();
        });

        //sync units when unit dropdown changed
        $("#COLLECT_UNIT_CODE").change(function () {
            syncunits();
        });

        //function to sync units
        function syncunits() {
            var unit = $("#COLLECT_UNIT_CODE option:selected").text();
            $("#unit1").text(unit);
            $("#unit2").text(unit);
            $("#unit3").text(unit);
        }

        //reapply default units
        $(document).on("click", "#lnkReapply", function () {
            var parMethod = $('#PAR_METHOD_IDX').val();
            var url = '@Url.Action("FetchRefParMethod")';

            //call ajax
            $.getJSON(url, { ID: parMethod }, function (data) {
                if (!data) {
                    return;
                }

                $("#COLLECT_UNIT_CODE").val(data.STD_UNIT_CODE);
                $("#ALERT_MIN_VALUE").val(data.CUST_MIN_VALUE || data.MIN_VALUE);
                $("#ALERT_MAX_VALUE").val(data.CUST_MAX_VALUE || data.MAX_VALUE);
                if (data.MIN_VALUE != null || data.CUST_MIN_VALUE != null) {
                    const fixFloatingPoint = val => Number.parseFloat(val.toFixed(8));
                    var zzz = fixFloatingPoint(Math.abs((data.CUST_MIN_VALUE || data.MIN_VALUE) * 3));
                    $("#ALERT_AMT_CHANGE").val(zzz);
                }
                $("#ALERT_STUCK_REC_COUNT").val(3);
                $('#norepostform').dirtyForms('rescan');
                syncunits();

            });

        });

    </script>

}