@model QREST.Models.vmDataImport
@{
    ViewBag.Title = "Import Data";
    ViewBag.SubTitle = "Import hourly or n-minute raw data";
    ViewBag.HelpLink = "Manual-Import";
}

<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("ManualImport", "Data", FormMethod.Post, new { @class = "", enctype = "multipart/form-data", @id = "norepostform" }))
        {
            @Html.AntiForgeryToken()

            <section class="panel panel-qrest">
                <div class="panel-heading font-bold">
                    Paste Data Below to Import
                </div>
                <div class="panel-body">
                    <div class="form-inline m-b-sm">
                        @Html.DropDownListFor(model => model.selImportType, Model.ddl_ImportType, "--Select Import Type--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selImportType)
                    </div>
                    <div id="subPar" class="form-inline m-b-sm">
                        @Html.DropDownListFor(model => model.selOrgID, Model.ddl_Organization, "--Select Tribe--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selOrgID)

                        @Html.DropDownListFor(model => model.selSite, Model.ddl_Sites, "--Select Site--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selSite)
                    </div>
                    @Html.ValidationMessageFor(model => model.selPollConfig)
                    @Html.ValidationMessageFor(model => model.selMonitor)
                    <div id="subPar" class="form-inline m-b-sm">

                        <!-- H and N only -->
                        @Html.DropDownListFor(model => model.selPollConfig, Model.ddl_PollConfig, "--Select Import Template--", new { @class = "form-control typeh", @style = "display:none" })

                        <a id="tempUrl2" class="btn btn-info m-l-none m-r-none" data-root="@Url.Action("ImportConfig")" style="display:none;" data-toggle="tooltip" data-original-title="Edit this selected Import Template" href=""><i class="fa fa-pencil"></i></a>
                        <a id="tempUrl" class="btn btn-dark m-l-none m-r-none" data-root="@Url.Action("DownloadTemplate")" style="display:none;" data-toggle="tooltip" data-original-title="Download this selected Import Template" href=""><i class="fa fa-download"></i></a>
                        <a id="tempUrl3" class="btn btn-success m-l-none m-r-none" data-root="@Url.Action("ImportConfig")" style="display:none;" data-toggle="tooltip" data-original-title="Add a new Import Template for this site" href=""><i class="fa fa-plus"></i></a>

                        <!-- H1 only -->
                        @Html.DropDownListFor(model => model.selMonitor, Model.ddl_Monitors, "--Select Parameter--", new { @class = "form-control typeh1", @style = "display:none" })

                        @Html.DropDownListFor(model => model.selTimeType, Model.ddl_Time, new { @class = "form-control typeh1", @style = "display:none" })
                        @Html.ValidationMessageFor(model => model.selTimeType)

                        @Html.DropDownListFor(model => model.selTimeZone, Model.ddl_TimeZone, "--Site Local Time Zone--", new { @class = "form-control typeh1", @style = "display:none" })
                        @Html.ValidationMessageFor(model => model.selTimeZone)

                    </div>
                    <div class="row col-md-6 typeh typehAny" style="display:none;">
                        <div class="form-group">
                            <label class="text-danger">Schedule validation check (min/max/stuck values) on hourly data following import</label>
                            @Html.DropDownListFor(model => model.selVal, Model.ddl_Calc, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.selVal)
                        </div>
                    </div>

                    <div class="row col-md-6 typen" style="display:none;">
                        <div class="form-group">
                            <label class="text-danger">Calculate Hourly Data Upon Import <b>(WARNING: will override any existing hourly data!)</b></label>
                            @Html.DropDownListFor(model => model.selCalc, Model.ddl_Calc, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.selCalc)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.IMPORT_BLOCK, new { @class = "form-control ", @placeholder = "(Paste data here)", @rows = "10" })
                                @Html.ValidationMessageFor(model => model.IMPORT_BLOCK)
                            </div>
                        </div>
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-primary">Import Data</button>
                            <a id="listUrl" data-root="@Url.Action("ImportList")" href="@Url.Action("ImportList")" class="btn btn-default pull-right">View Import History</a>
                        </div>
                    </div>
                    <div class="row">
                    </div>
                </div>
            </section>
        }
    </div>
</div>


@Html.Partial("_PleaseWait", "Shared")

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            dispEverything();

            //generic function controlling display of all parameters
            function dispEverything() {
                var impTyp = $("#selImportType").val();
                var org = $("#selOrgID").val();
                var site = $("#selSite").val();
                var pollConfig = $("#selPollConfig").val();

                $(".typeh").toggle(impTyp == "H");
                $(".typeh1").toggle(impTyp == "H1");
                $(".typehAny").toggle(impTyp == "H" || impTyp == "H1");
                $(".typen").toggle(impTyp == "F");
                $("#tempUrl").toggle(site != "" && site != null && pollConfig != "" && pollConfig != null && impTyp != "H1");
                $("#tempUrl2").toggle(site != "" && site != null && pollConfig != "" && pollConfig != null && impTyp != "H1");
                $("#tempUrl3").toggle(site != "" && site != null && impTyp != "H1");
                $("#selPollConfig").toggle(site != '' && (impTyp == "H" || impTyp == "F"));


                $("#tempUrl").attr('href', $("#tempUrl").data('root') + '/' + pollConfig);
                $("#tempUrl2").attr('href', $("#tempUrl2").data('root') + '/' + pollConfig);
                $("#tempUrl3").attr('href', $("#tempUrl3").data('root') + '/?siteid=' + site);
                $("#listUrl").attr('href', $("#listUrl").data('root') + '/?selOrgID=' + org);

            };

            //import type dropdown change
            $('#selImportType').change(function () {
                dispEverything();
            });

            // org dropdown change
            $('#selOrgID').change(function () {
                fetchSites();
                $('#selMonitor').empty().append($('<option></option>').val('').text('--Select Parameter--'));;   //clear out monitors too
                $('#selPollConfig').empty().append($('<option></option>').val('').text('--Select Import Template--'));;   //clear out polling config
                dispEverything();
            });


            // site dropdown change
            $('#selSite').change(function () {

                var impTyp = $("#selImportType").val();

                if (impTyp == "H1") {

                    //fetch parameters related to the selected site
                    var mons = $('#selMonitor');
                    mons.empty();
                    $.getJSON('@Url.Action("FetchMonitorsBySite")', { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        mons.append($('<option></option>').val('').text('--Select Parameter--'));
                        $.each(data, function (index, item) {
                            mons.append($('<option></option>').val(item.Value).text(item.Text));
                        });
                    });

                    //fetch the H1 import details if any exist to set 
                    $.getJSON('@Url.Action("FetchImportTemplateH1")', { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        if (data != "null") {
                            $("#selTimeType").val(data.TIME_POLL_TYPE);
                            $("#selTimeZone").val(data.LOCAL_TIMEZONE);
                        }
                    });

                }
                else if (impTyp == "H" || impTyp == "F") {

                    //fetch polling import template
                    var url = '@Url.Action("FetchImportTemplates")';
                    var polls = $('#selPollConfig');
                    polls.empty();
                    $.getJSON(url, { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        polls.append($('<option></option>').val('').text('--Select Import Template--'));
                        $.each(data, function (index, item) {
                            polls.append($('<option></option>').val(item.Value).text(item.Text));
                        });
                    });

                }

                dispEverything();

            });


            
            //update import template dropdown
            $('#selPollConfig').change(function () {
                dispEverything();
            });


            //retrieve sites based on selected org (should fire on page load and when org changes)
            function fetchSites() {
                var url = '@Url.Action("FetchSites")';
                var sites = $('#selSite');
                sites.empty();

                $('#selMonitor').empty();   //clear out monitors too

                $.getJSON(url, { ID: $('#selOrgID').val() }, function (data) {
                    if (!data) {
                        return;
                    }
                    sites.append($('<option></option>').val('').text('--Select Site--'));
                    $.each(data, function (index, item) {
                        sites.append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            }



            $("form").submit(function () {
                if (!$(this).valid()) {
                    return false;
                }
                else
                {
                    pleaseWait();
                    return true;
                }
            });

        });

    </script>
}