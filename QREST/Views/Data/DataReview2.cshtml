@model QREST.Models.vmDataReview2
@{
    ViewBag.Title = "Manual Validation Data Review";
    ViewBag.HideTitle = true;
}
@Html.HiddenFor(model => model.selDtStart)
@Html.HiddenFor(model => model.selDtEnd)
@Html.HiddenFor(model => model.selDuration)
@Html.HiddenFor(model => model.selMon.ORG_ID)
@Html.HiddenFor(model => model.selMon.T_QREST_MONITORS.MONITOR_IDX)
<section class="panel panel-qrest">
    <header class="panel-heading font-bold">Step 2: Manual Validation Data Review</header>
    <div class="panel-body">
        <div class="bg-gradient pull-out" style="padding:10px; margin-top:-15px;">
            <strong class="text-danger">Site: </strong>  @Html.DisplayFor(model => model.selMon.SITE_ID)
            <strong class="m-l-md text-danger">Parameter: </strong> @Html.DisplayFor(model => model.selMon.PAR_NAME) (@Html.DisplayFor(model => model.selMon.PAR_CODE))
            <strong class="m-l-md text-danger">POC: </strong> @Html.DisplayFor(model => model.selMon.T_QREST_MONITORS.POC)
            <strong class="m-l-md text-danger">Method: </strong> @Html.DisplayFor(model => model.selMon.METHOD_CODE)
            <br />
            <strong class="text-danger">Dates: </strong>  @Html.DisplayFor(model => model.selDtStart) - @Html.DisplayFor(model => model.selDtEnd)
        </div>
        <div class="line line-dashed  pull-in"></div>

        <div id="chartContainer" class="collapse in" style="height: 320px; width: 100%;">
        </div>

        @if (Model.SuppData1 != null)
        {
            <div id="chartContainerSupp1" class="collapse in" style="height: 160px; width: 100%;">
            </div>
        }

        @using (Html.BeginForm("DataReview2", "Data", FormMethod.Post, new { @class = "m-b-sm" }))
        {
            @Html.HiddenFor(model => model.selMon.T_QREST_MONITORS.MONITOR_IDX)
            @Html.HiddenFor(model => model.selDtStart)
            @Html.HiddenFor(model => model.selDtEnd)
            @Html.HiddenFor(model => model.selDuration)

            <a class=" btn btn-default" href="@Url.Action("DataReviewSummary", new { id = Model.selMon.T_QREST_MONITORS.SITE_IDX, month=Model.selDtStart.Month, year=Model.selDtStart.Year })">Back</a>
            <a id="divBulk" class="btn btn-success" href="#modal-form1" data-toggle="modal" style="display:none;">Bulk Edit Selected</a>

            if (Model.RawData != null)
            {
                <table id="gridData" class="table table-striped table-bordered" style="width:100%; ">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectAll" /> Select All
                            </th>
                            <th>Site</th>
                            <th>Par Code</th>
                            <th>Parameter</th>
                            <th>POC</th>
                            <th>Time UTC</th>
                            <th>Value</th>
                            <th>Unit</th>
                            <th>Flags</th>
                            <th>AQS Null Code</th>
                            <th>Lvl 1</th>
                            <th>Lvl 2</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.RawData.Count; i++)
                        {

                            <tr data-date="@Html.DisplayFor(model => model.RawData[i].DATA_DTTM)">
                                <td>
                                    @Html.HiddenFor(model => model.RawData[i].DATA_RAW_IDX)
                                    @Html.EditorFor(model => model.RawData[i].EditInd, new { @class = "chk1" })
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].SITE_ID)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].PAR_CODE)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].PAR_NAME)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].POC)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].DATA_DTTM)
                                </td>
                                <td data-order=@Model.RawData[i].DATA_VALUE_ORDER>
                                    @Html.DisplayFor(model => model.RawData[i].DATA_VALUE)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].UNIT_DESC)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].VAL_CD)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].AQS_NULL_CODE)
                                </td>
                                <td style="@(Model.RawData[i].LVL1_VAL_IND == true ? "background-color:#85c788" : "")">
                                    @Html.DisplayFor(model => model.RawData[i].LVL1_VAL_USER)
                                    @string.Format("{0:d}", Model.RawData[i].LVL1_VAL_DT)
                                </td>
                                <td style="@(Model.RawData[i].LVL2_VAL_IND == true ? "background-color:#85c788" : "")">
                                    @Html.DisplayFor(model => model.RawData[i].LVL2_VAL_USER)
                                    @string.Format("{0:d}", Model.RawData[i].LVL2_VAL_DT)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => model.RawData[i].NOTES)
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>


            }


            <!-- START EDIT MODAL  -->
            <div class="modal fade" id="modal-form1" style="display: none" aria-hidden="true">
                <div class="modal-dialog">
                    @Html.AntiForgeryToken()
                    <div class="modal-content" style="min-height:450px;">
                        <div class="modal-header">
                            <h4 style="float: left" class="modal-title">Bulk Edit</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body no-padder">
                            <section class="panel panel-default">
                                <header class="panel-heading bg-light">
                                    <ul class="nav nav-tabs nav-justified">
                                        <li class="active">
                                            <a href="#basic" data-toggle="tab">Basic</a>
                                        </li>
                                        @if (Model.secLvl2Ind == true)
                                        {
                                            <li class="">
                                                <a href="#advanced" data-toggle="tab">Advanced</a>
                                            </li>
                                        }
                                    </ul>
                                </header>
                                <div class="panel-body">
                                    <div class="tab-content">
                                        <div class="tab-pane active" id="basic">

                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>AQS Null Qualifier</label>
                                                        <br />
                                                        @Html.DropDownListFor(model => model.editNullQual, Model.ddl_NullQual, "", new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>

                                            @if (Model.secLvl1Ind == true)
                                            {
                                                <div class="row col-md-12">
                                                    <div class="form-group">
                                                        <label>Update Level 1 Review Status</label>
                                                        <br />
                                                        <div class="btn-group" data-toggle="buttons">
                                                            <label class="btn btn-sm btn-info active"> @Html.RadioButtonFor(x => x.editLvl1, "")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> No Changes </label>
                                                            <label class="btn btn-sm btn-success"> @Html.RadioButtonFor(x => x.editLvl1, "Y")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Mark Level 1 Complete </label>
                                                            <label class="btn btn-sm btn-danger"> @Html.RadioButtonFor(x => x.editLvl1, "N")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Rollback Level 1 </label>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.secLvl2Ind == true)
                                            {
                                                <div class="row col-md-12">
                                                    <div class="form-group">
                                                        <label>Update Level 2 Review Status</label>
                                                        <br />
                                                        <div class="btn-group" data-toggle="buttons">
                                                            <label class="btn btn-sm btn-info active"> @Html.RadioButtonFor(x => x.editLvl2, "")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> No Changes </label>
                                                            <label class="btn btn-sm btn-success"> @Html.RadioButtonFor(x => x.editLvl2, "Y")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Mark Level 2 Complete </label>
                                                            <label class="btn btn-sm btn-danger"> @Html.RadioButtonFor(x => x.editLvl2, "N")<i class="fa fa-square-o text"></i> <i class="fa fa-check-square text-active"></i> Rollback Level 2 </label>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <div class="tab-pane" id="advanced">

                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label>Unit Code</label>
                                                        <br />
                                                        @Html.DropDownListFor(model => model.editUnitCode, Model.ddl_ParUnits, "", new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    <label>Notes</label>
                                                    <br />
                                                    @Html.TextAreaFor(model => model.editNotes, new { @class = "form-control", @style = "width:100%" })
                                                    @Html.ValidationMessageFor(model => model.editNotes)
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                            </section>

                        </div>
                        <div class="modal-footer">
                            <button id="btnSave" type="submit" class="btn btn-primary">Save</button>
                            <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- END EDIT MODAL -->

        }

    </div>
</section>


@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/canvasjs")
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
    $(document).ready(function () {

        moment.updateLocale(moment.locale(), { invalidDate: "" });

        $('#gridData').DataTable({
            "scrollY": "400px",
            "scrollCollapse": true,
            "paging": false,
            "searching": false,
        });
        
        var dataPointsA = [], dataPointsSupp1 = [], dataPointsSupp2 = [];
        var parName, parNameSupp1, parNameSupp2;
        var chart, chart1;


        @if (Model.RawData != null && Model.RawData.Count > 0)
        {
            <text>parName = '@Model.RawData[0].PAR_NAME (' + '@Model.RawData[0].UNIT_DESC' + ')'</text>
        }

        @foreach (var item in Model.RawData)
        {
            <text>addPoint('@item.DATA_DTTM', '@item.DATA_VALUE', '@item.VAL_CD', dataPointsA);
            </text>
        }

        @if (Model.SuppData1 != null && Model.SuppData1.Count > 0) {

            <text>parNameSupp1 = '@Model.SuppData1[0].PAR_NAME (' + '@Model.SuppData1[0].UNIT_DESC' + ')'</text>

            foreach (var item in Model.SuppData1)
            {
                <text>addPoint('@item.DATA_DTTM', '@item.DATA_VALUE', '@item.VAL_CD', dataPointsSupp1);
                </text>
            }
        }

        function addPoint(xx, yy, zz, array) {
            var lcolor = "#67B347";
            if (yy == "FEW") {
                lcolor = "#ffee8c";
            }
            else if (zz == "MIN") {
                lcolor = "#d32d41";
            }
            else if (zz == "MAX") {
                lcolor = "#d32d41";
            }
            else if (zz == "JUMP") {
                lcolor = "#6F2DA7";
            }

            array.push({
                x: new Date(xx),
                y: yy == "FEW" ? 0 : Number(yy),
                lineColor: lcolor,
                color: lcolor
            });
        }


        chart = new CanvasJS.Chart("chartContainer", {
            zoomEnabled: true,
            animationEnabled: true,
            title: {
                text: parName
            },
            data: [{
                type: "column",
                connectNullData: true,
                xValueType: "dateTime",
                xValueFormatString: "MM/DD/YYYY HH:mm",
                name: "line1",
                dataPoints: dataPointsA
            }],
            rangeChanged: function (e) {

                var x1 = moment(e.axisX[0].viewportMinimum).format('MM-DD-YYYY HH:mm');
                var x2 = moment(e.axisX[0].viewportMaximum).format('MM-DD-YYYY HH:mm');

                console.log(x1);
                $('#gridData tbody tr').each(function (index, element) {
                    rowdt = $(this).attr('data-date');
                    rowdt = new Date(rowdt);
                    x1d = new Date(x1);
                    x2d = new Date(x2);
                    if (rowdt.getTime() < x1d.getTime() || rowdt.getTime() > x2d.getTime()) {
                        $(this).css('display', 'none');
                    }
                    else {
                        $(this).css('display', '');
                    }
                });

                if (!chart1.options.axisX)
                    chart1.options.axisX = {};

                if (e.trigger === "reset") {
                    chart1.options.axisX.viewportMinimum = chart1.options.axisX.viewportMaximum = null;
                    chart1.render();
                }
                else {
                    chart1.options.axisX.viewportMinimum = e.axisX[0].viewportMinimum;
                    chart1.options.axisX.viewportMaximum = e.axisX[0].viewportMaximum;
                    chart1.render();
                }
            }
        });

        chart.render();

        //supp parameters
        if (dataPointsSupp1.length > 0) {
            chart1 = new CanvasJS.Chart("chartContainerSupp1", {
                zoomEnabled: false,
                animationEnabled: true,
                title: {
                    text: parNameSupp1
                },
                data: [{
                    type: "column",
                    connectNullData: true,
                    xValueType: "dateTime",
                    xValueFormatString: "MM/DD/YYYY HH:mm",
                    name: "line2",
                    dataPoints: dataPointsSupp1
                }]
            });

            chart1.render();
        }

    });


    //select all
    $('#selectAll').click(function (e) {
        $('#gridData').find('tr:visible').find('td input:checkbox').prop('checked', this.checked);
        if ($('input.check-box:checked').length == 0)
            $('#divBulk').hide();
        else
            $('#divBulk').show();
    });


    //allow bulk edit
    $('.check-box').click(function (e) {
        if ($('input.check-box:checked').length == 0)
            $('#divBulk').hide();
        else
            $('#divBulk').show();
    });

    </script>
}


<style>
    .dataTables_scrollHead {
        height: 47px;
    }

    .sorting {
        vertical-align: top !important;
    }
</style>

