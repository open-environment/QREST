@model QREST.Models.vmReportsExport
@{
    ViewBag.Title = "Export Data";
    ViewBag.SubTitle = "Export your data to Excel.";
}

@using (Html.BeginForm("Export2", "Reports", FormMethod.Post, new { @class = "", enctype = "multipart/form-data", @id = "" }))
{
    @Html.AntiForgeryToken()

    <section class="panel panel-qrest ">
        <div class="panel-heading">
            Select Data to Export
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-inline m-b-sm raw" style="padding-left:20px">
                        @Html.DropDownListFor(model => model.selOrgID, Model.ddl_Organization, "Filter Organization (optional)", new { @class = "form-control" })
                    </div>

                    <div class="form-group">
                        <input type="checkbox" name="exportdata" value="Sites" class="checkbox-inline checkbox-lg" /> <span style="font-size:16px">Sites</span>
                        <br />
                        <input type="checkbox" name="exportdata" value="Monitors" class="checkbox-inline checkbox-lg" />  <span style="font-size:16px">Monitors</span>
                        <br />
                        <input type="checkbox" name="exportdata" value="PollingConfig" class="checkbox-inline checkbox-lg" />  <span style="font-size:16px">Polling Configurations</span>
                        <br />
                        <input id="export1" type="checkbox" name="exportdata" value="Data" class="checkbox-inline checkbox-lg" data-toggle="collapse" data-target="#divData" disabled="disabled" />  <span style="font-size:16px">Air Data</span>
                        <br />
                    </div>
                    <div id="divData" class="form-inline m-b-sm raw collapse" style="padding-left:20px;">
                        @Html.DropDownListFor(model => model.selMon, Model.ddl_Monitor, "Filter Monitor (optional)", new { @class = "form-control" })
                        <br />
                        <select id="selType" name="selType" class="form-control">
                            <option value="H">Hourly</option>
                            <option value="F">5-Minute</option>
                        </select>
                        <input id="selDate" name="selDate" class="form-control" style="width:300px" data-start="" data-end="" />
                        @Html.DropDownListFor(model => model.selTimeType, Model.ddl_TimeType, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selTimeType)

                    </div>
                    <button type="submit" class="btn btn-primary">Export Data</button>
                </div>
            </div>
        </div>
    </section>
}


@section Scripts {
    @Scripts.Render("~/bundles/datatables")
    @Scripts.Render("~/bundles/canvasjs")

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script type="text/javascript">
        $(document).ready(function () {

            moment.updateLocale(moment.locale(), { invalidDate: "" });

            //daterange selector initialization
            $('input[name="selDate"]').daterangepicker({
                timePicker: true,
                timePickerIncrement: 60,
                timePicker24Hour: true,
                autoUpdateInput: true,
                startDate: moment().startOf('day'),
                endDate: moment().endOf('day'),
                ranges: {
                    'Today': [moment().startOf('day'), moment().endOf('day')],
                    'Yesterday': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],
                    'Last 7 Days': [moment().subtract(6, 'days').startOf('day'), moment().endOf('day')],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                locale: {
                    format: 'M/DD/YYYY HH:00'
                }
            }
                , function (start, end, label) {
                    $('#selDate').data('start', start.format('YYYY-MM-DD'));
                    $('#selDate').data('end', end.format('YYYY-MM-DD'));
                }
            );


            //initialize monitor dropdown on page load
            //fetchMonitors();

            //update monitor dropdown
            $('#selOrgID').change(function () {
                fetchMonitors();
            });

            //update monitor dropdown
            function fetchMonitors() {
                $('#selMon').empty();
                $.getJSON('@Url.Action("FetchMonitorsWithData","Data")', { ID: $("#selOrgID").val() }, function (data) {
                    if (!data) {
                        return;
                    }
                    //popualte monitor dropdown vaules
                    $('#selMon').append($('<option></option>').val('').text('Filter Monitor (optional)'));
                    $.each(data, function (index, item) {
                        $('#selMon').append($('<option></option>').val(item.Value).text(item.Text));
                    });

                    //deselect hourly data if no monitors
                    if (data.length == 0) {
                        $('#divData').collapse('toggle');
                        $("#export1").prop("checked", false);
                        $("#export1").attr("disabled", true);
                    }
                    else
                        $("#export1").removeAttr("disabled");
                });
            };

        });

    </script>
}