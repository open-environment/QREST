@model QREST.Models.vmDashboardIndex
@{
    ViewBag.Title = "Dashboard";
    ViewBag.HelpLink = "Dashboard";
}
@if (!string.IsNullOrEmpty(Model.Announcement))
{
    <div class="alert alert-block alert-info fade in">
        <button data-dismiss="alert" class="close" type="button">×</button>
        @Html.Raw(HttpUtility.HtmlDecode(Model.Announcement))
    </div>
}


<section class="panel panel-default">
    <div class="row m-l-none m-r-none bg-light lter">
        <div class="col-sm-6 col-md-3 padder-v b-r b-light">
            <span class="fa-stack fa-2x pull-left m-r-sm">
                <i class="fa fa-circle fa-stack-2x text-danger"></i>
                <i class="fa fa-bell fa-stack-1x text-white"></i>
            </span>
            <a class="clear" href="@Url.Action("Notifications", "Account")">
                <span class="h3 block m-t-xs"><strong id="firers">@Model.MyAlertCount</strong></span>
                <small class="text-muted text-uc">Notifications</small>
            </a>
        </div>
        <div class="col-sm-6 col-md-3 padder-v b-r b-light lt">
            <span class="fa-stack fa-2x pull-left m-r-sm">
                <i class="fa fa-circle fa-stack-2x icon-muted"></i>
                <i class="fa fa-clock-o fa-stack-1x text-white"></i>
            </span>
            <a class="clear" href="@Url.Action("SiteList", "Site")">
                <span class="h4 block m-t-xs">
                    @if (Model.T_QREST_SITES != null && Model.T_QREST_SITES.Count > 0)
                    {
                        @Model.T_QREST_SITES[0].POLLING_LAST_RUN_DT
                    }
                    else
                    {
                        <strong>N/A</strong>
                    }
                </span>
                <small class="text-muted text-uc">Last Poll (UTC)</small>
            </a>
        </div>
        <div class="col-sm-6 col-md-3 padder-v b-r b-light">
            <span class="fa-stack fa-2x pull-left m-r-sm">
                <i class="fa fa-circle fa-stack-2x text-info"></i>
                <i class="fa fa-map-marker fa-stack-1x text-white"></i>
            </span>
            <a class="clear" href="@Url.Action("SiteList", "Site")">
                <span class="h3 block m-t-xs"><strong>@Model.MySiteCount</strong></span>
                <small class="text-muted text-uc">My Air Sites</small>
            </a>
        </div>
        <div class="col-sm-6 col-md-3 padder-v b-r b-light lt">
            <span class="fa-stack fa-2x pull-left m-r-sm">
                <i class="fa fa-circle fa-stack-2x text-warning"></i>
                <i class="fa fa-search fa-stack-1x text-white"></i>
            </span>
            <a class="clear" href="@Url.Action("MonitorList", "Site")">
                <span class="h3 block m-t-xs"><strong id="bugs">@Model.MyMonitorCount</strong></span>
                <small class="text-muted text-uc">My Monitors</small>
            </a>
        </div>

    </div>
</section>
<div class="row">
    <div class="col-md-6">
        <section class="panel panel-qrest" style="border-bottom-left-radius:0px; border-bottom-right-radius:0px">
            <header class="panel-heading font-bold">My Sites</header>
            <div class="">
                <div id="map_canvas" style="width: 100%; height: 400px; padding: 0; margin: 0;"></div>
            </div>
        </section>
    </div>
    @if (User.IsInRole("GLOBAL ADMIN"))
    {
        <div id="divHealth" class="col-md-6">
            <section class="panel panel-qrest" style="border-bottom-left-radius:0px; border-bottom-right-radius:0px">
                <header class="panel-heading font-bold">
                    QREST Health
                    <button id="btnHealth" class="btn btn-xs btn-primary health-dtl pull-right">Toggle Snapshot</button>
                </header>
                <div class="panel-body">
                    <div class="table-responsive">
                        <table id="gridData" class="table table-striped table-bordered" data-ride="datatables" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Org</th>
                                    <th>Site</th>
                                    <th>Logger</th>
                                    <th>Last Poll (UTC)</th>
                                    <th>Current UTC</th>
                                    <th>Msg</th>
                                </tr>
                            </thead>
                            @foreach (var item in Model.SiteHealth)
                            {
                                var dtLastPoll = item.LAST_UTC_POLL ?? System.DateTime.Now.AddDays(-1);
                                var dtCurTime = item.CURR_UTC;
                                var styl = "";
                                var mn = System.DateTime.Now.Month;
                                var yr = System.DateTime.Now.Year;
                                var dy = System.DateTime.Now.Day;
                                if (dtLastPoll > dtCurTime) { styl = "text-danger"; }
                                if (dtLastPoll < dtCurTime.AddHours(-5)) { styl = "text-danger"; }
                                <tr class="@styl">
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ORG_ID)
                                    </td>
                                    <td>
                                        <a href="@Url.Action("ReportDaily", "Home", new { id = item.SITE_IDX, month=mn, year=yr, day=dy })" class="text-info">
                                            @Html.DisplayFor(modelItem => item.SITE_ID) - @Html.DisplayFor(modelItem => item.SITE_NAME)
                                        </a>

                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LOGGER_TYPE)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.LAST_UTC_POLL)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CURR_UTC)
                                    </td>
                                    <td>
                                        @if (item.LAST_UTC_POLL > item.CURR_UTC)
                                        {
                                            <span><i class="fa fa-warning"></i> UTC Polling in future <i class="fa fa-warning"></i></span>
                                        }
                                        else if (item.LAST_UTC_POLL == null)
                                        {
                                            <span><i class="fa fa-warning"></i> No polling conducted <i class="fa fa-warning"></i></span>
                                        }
                                        else if (dtLastPoll < dtCurTime.AddHours(-5))
                                        {
                                            <span><i class="fa fa-warning"></i> Polling has been down for 5 or more hours <i class="fa fa-warning"></i></span>
                                        }

                                    </td>
                                </tr>
                            }
                        </table>
                    </div>

                </div>
                <div class="panel-body" style="display:none">

                </div>
            </section>
        </div>
    }

    <div id="divSnapshot" class="col-md-6" style="@(User.IsInRole("GLOBAL ADMIN") ? "display:none" : "")">
        <section class="panel panel-qrest">
            <header class="panel-heading font-bold">
                Monitor Quickview
                <span class="pull-right"><small class="text-muted">Past 24 hours (UTC)</small></span>
                @if (User.IsInRole("GLOBAL ADMIN"))
                {
                    <button id="btnSnapshot" class="btn btn-xs btn-primary health-dtl pull-right">Toggle Health</button>
                }
            </header>
            <div class="bg-light">
                @Html.DropDownListFor(model => model.selChartMon, Model.ddl_MyMonitors, new { @class = "form-control ", @onchange = "getDataChart()" })
                <div class="text-center m-b-n m-t-sm">
                    <div id="chartContainer" class="collapse in" style="height: 200px; width: 100%;">
                    </div>
                </div>
            </div>
            <div class="panel-body">
                <div>
                    <span class="h4 block">Monitor Health</span>
                </div>
                <div class="line pull-in"></div>
                <div class="row m-t-sm">
                    <div class="col-xs-3">
                        <small class="text-muted block">Last <br />Poll</small>
                        <span id="lastPol" class="badge bg-primary"></span>
                    </div>
                    <div class="col-xs-3">
                        <small class="text-muted block">Last <br />QC</small>
                        <span class="badge bg-danger">Never</span>
                    </div>
                    <div class="col-xs-3">
                        <small class="text-muted block">Last AQS <br />Review</small>
                        <span id="lastAqs" class="badge bg-warning"></span>
                    </div>
                    <div class="col-xs-3">
                        <small class="text-muted block">Last AQS <br />Submit</small>
                        <span class="badge bg-danger">Never</span>
                    </div>
                </div>
            </div>
        </section>
    </div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/moment")
    @Scripts.Render("~/bundles/canvasjs")
<script>
    $(document).ready(function () {
        moment.updateLocale(moment.locale(), { invalidDate: "" });
        getDataChart();
    });

    $("#btnHealth").click(function () {
        $("#divHealth").hide();
        $("#divSnapshot").show();
        getDataChart();
    })
    $("#btnSnapshot").click(function () {
        $("#divHealth").show();
        $("#divSnapshot").hide();
    })

        function getDataChart() {

            var dataPointsA = [];
            var parName;

            $.ajax({
                type: "POST",
                datatype: "json",
                url: "@Url.Action("RawDataTodayChart", "Dashboard")",
                data: jQuery.param({
                    selMon: $('#selChartMon').val()
                }),
                success: function (field) {
                    var fff = field;
                    if (fff != null) {
                        var lcolor="blue";
                        for (var i = 0; i < fff.length; i++) {
                            if (fff[i].DATA_VALUE == "FEW") {
                                lcolor = "#ffee8c";
                            }
                            else if (fff[i].VAL_CD == "MIN") {
                                lcolor = "#d32d41";
                            }
                            else if (fff[i].VAL_CD == "MAX") {
                                lcolor = "#d32d41";
                            }
                            else if (fff[i].VAL_CD == "JUMP") {
                                lcolor = "#6F2DA7";
                            }
                            else {
                                lcolor = "#67B347";
                            }
                                dataPointsA.push({
                                    x: new Date(moment(fff[i].DATA_DTTM).format('MM/DD/YYYY HH:mm')),
                                    y: fff[i].DATA_VALUE == "FEW" ? 0 : Number(fff[i].DATA_VALUE),
                                    lineColor: lcolor,
                                    color: lcolor
                                });
                            parName = fff[i].PAR_NAME;
                        }

                        var chart = new CanvasJS.Chart("chartContainer", {
                            zoomEnabled: true,
                            animationEnabled: true,
                            exportEnabled: true,
                            title: {
                                text: parName
                            },
                            data: [{
                                type: "column",
                                connectNullData: true,
                                xValueType: "dateTime",
                                xValueFormatString: "MM/DD/YYYY HH:mm",
                                name: "line1",
                                dataPoints: dataPointsA
                            }]
                        });

                        showDefaultText(chart, "No Data available");
                        chart.render();
                    }





                    $.ajax({
                        type: "POST",
                        datatype: "json",
                        url: "@Url.Action("MonitorSnapshot", "Data")",
                        data: jQuery.param({
                            selMon: $('#selChartMon').val()
                        }),
                        success: function (field) {
                            var fff = field;
                            if (fff != null) {
                                //polling
                                var dPol = moment(fff.POLLING_LAST_RUN_DT).format("MM/DD/YYYY HH:mm");
                                var dNow = moment().utc().format("MM/DD/YYYY HH:mm");
                                var diffPol = Math.abs((new Date(dPol) - new Date(dNow)) / 1000 / 60);
                                $("#lastPol").text(diffPol + ' min');

                                //aqs review
                                var dAqs = moment(fff.lvl1).format("MM/DD/YYYY HH:mm");
                                var diffAqs = Math.abs((new Date(dAqs) - new Date(dNow)) / 1000 / 60 / 60 / 24);
                                if (isNaN(diffAqs)) {
                                    $("#lastAqs").text('Never');
                                }
                                else {
                                    $("#lastAqs").text(Math.round(diffAqs || 0) + ' days');
                                }
                            }
                        }
                    });


                }
            });

        }


    function showDefaultText(chart, text) {

        var isEmpty = !(chart.options.data[0].dataPoints && chart.options.data[0].dataPoints.length > 0);

        if (!chart.options.subtitles)
            (chart.options.subtitles = []);

        if (isEmpty)
            chart.options.subtitles.push({
                text: text,
                verticalAlign: 'center',
            });
        else
            (chart.options.subtitles = []);
    }

</script>

<link rel="stylesheet" href="https://js.arcgis.com/4.13/esri/themes/light/main.css">
<script src="https://js.arcgis.com/4.13/"></script>
<script>
    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/Graphic"
    ], function (Map, MapView, Graphic) {

            var map = new Map({
                basemap: "topo-vector"
            });

            var view = new MapView({
                container: "map_canvas",
                map: map,
                center: [-102, 37],
                zoom: 4
            });

            function AddPoint(lat, long, sitename, org, aqs, monthlyuri, annualuri, dailyuri, configuri, qauri) {

                // Create popup template
                var popupTemplate = {
                    title: "<b>{Name}</b>",
                    content: "<b>Maintained by:</b> {Org}<br/><b>AQS Site ID:</b> {Aqs}<br/><b>Lat/Long:</b> {Location}<br/><a class='badge bg-warning' href='" + dailyuri + "'>Today's Data</a><a class='badge bg-default m-l-md' href='" + monthlyuri + "'>Monthly Summary</a><a class='badge bg-info m-l-md' href='" + annualuri + "'>Annual Summary</a><br/><a class='badge bg-danger  m-t-sm' href='" + configuri + "'>Site Config</a><a class='badge btn-dark m-l-md m-t-sm' href='" + qauri + "'>QA Data Review</a>"
                };

                var pointGraphic = new Graphic({
                    geometry: {
                        type: "point",
                        longitude: long,
                        latitude: lat
                    },
                    symbol: {
                        type: "simple-marker",
                        color: [226, 119, 40],
                        outline: {
                            color: [0, 0, 0],
                            width: 1
                        }
                    },
                    attributes: {
                        Name: sitename,
                        Org: org,
                        Aqs: aqs,
                        Location: lat + " / " + long
                    },
                    popupTemplate: popupTemplate
                });

                view.graphics.add(pointGraphic);
            };


            // the hitTest() checks to see if any graphics in the view intersect the given screen x, y coordinates
            view.on("pointer-move", function (evt) {
                var screenPoint = {
                    x: evt.x,
                    y: evt.y
                };

                view.hitTest(screenPoint)
                    .then(function (response) {
                        if (response.results.length > 0) {
                            if (response.results[0].graphic.layer.title != 'World Topo')
                                document.getElementById("map_canvas").style.cursor = "pointer";
                            else
                                document.getElementById("map_canvas").style.cursor = "default";
                        }
                    });
            });


            @foreach (var item in Model.T_QREST_SITES)
            {
                if (item.LATITUDE != null && item.LONGITUDE != null && item.SITE_NAME != null)
                {
                    <text>
                    AddPoint(@item.LATITUDE, @item.LONGITUDE, '@item.SITE_NAME', '@item.ORG_ID', '@item.STATE_CD-@item.COUNTY_CD-@item.AQS_SITE_ID', '@Url.Action("ReportMonthly", "Home", new { id= item.SITE_IDX })', '@Url.Action("ReportAnnual", "Home", new { id= item.SITE_IDX })', '@Url.Action("ReportDaily", "Home", new { id= item.SITE_IDX })', '@Url.Action("SiteEdit", "Site", new { id= item.SITE_IDX })', '@Url.Action("DataReview", "Data", new { id= item.SITE_IDX })');
                    </text>
                }
            }
    });



</script>
}

