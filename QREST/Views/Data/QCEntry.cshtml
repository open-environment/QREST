@using QREST.App_Logic.BusinessLogicLayer
@model QREST.Models.vmDataQCEntry
@{
    ViewBag.Title = "Quality Control Data Entry";
    ViewBag.HelpLink = "Quality-Control";
}


@using (Html.BeginForm("QCEntry", "Data", FormMethod.Post, new { @id = "norepostform", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.QC_ASSESS_IDX)

    <div class="row col-md-12">
        <section class="panel panel-qrest">
            <header class="panel-heading font-bold">Basic Info</header>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelForRequired(m => m.ASSESSMENT_TYPE, "Assessment Type", new { @class = "control-label" })
                            @if (Model.QC_ASSESS_IDX == null)
                            {
                                <div class="input-group">
                                    @Html.DropDownListFor(model => model.ASSESSMENT_TYPE, Model.ddl_Assess_Type, "", new { @class = "form-control" })
                                    <div class="input-group-btn">
                                        <a href="@Url.Action("Help","Home")/#QC-Types" class="btn btn-icon btn-info" target="_blank"><i class="fa fa-question-circle"></i></a>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.ASSESSMENT_TYPE)
                            }
                            else
                            {
                                <div class="input-group">
                                    @Html.HiddenFor(model => model.ASSESSMENT_TYPE)
                                    @Html.DropDownListFor(model => model.ASSESSMENT_TYPE, Model.ddl_Assess_Type, "", new { @class = "form-control", @disabled = "disabled" })
                                    <div class="input-group-btn">
                                        <a href="@Url.Action("Help","Home")/#QC-Types" class="btn btn-icon btn-info" target="_blank"><i class="fa fa-question-circle"></i></a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelForRequired(m => m.MONITOR_IDX, "Select Monitor", new { @class = "control-label" })
                            @if (Model.QC_ASSESS_IDX == null)
                            {
                                @Html.DropDownListFor(model => model.MONITOR_IDX, Model.ddl_Monitor, "", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.MONITOR_IDX)
                            }
                            else
                            {
                                @Html.HiddenFor(model => model.MONITOR_IDX)
                                @Html.DropDownListFor(model => model.MONITOR_IDX, Model.ddl_Monitor, "", new { @class = "form-control", @disabled = "disabled" })
                            }
                        </div>
                    </div>
                    <div id="divUnit" class="col-md-3" style='@(Model.DisplayUnit==true ? "" : "display:none")'>
                        <div class="form-group">
                            <label>Flow Rate Unit</label>
                            @Html.DropDownListFor(model => model.UNIT_CODE, Model.ddl_FlowRate_Unit, "", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.UNIT_CODE)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelForRequired(m => m.MONITOR_IDX, "Assessment Date", new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.ASSESSMENT_DT, "{0:MM/dd/yyyy}", new { @class = "form-control ", @autocomplete = "off", @placeholder = "mm/dd/yyyy" })
                            @Html.ValidationMessageFor(model => model.ASSESSMENT_DT)
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Time</label>
                            @Html.TextBoxFor(model => model.ASSESSMENT_TM, new { @class = "form-control time-cleave", @maxlength = "5", @autocomplete = "off", @placeholder = "hh:mm" })
                            @Html.ValidationMessageFor(model => model.ASSESSMENT_TM)
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>Assessed By</label>
                            @Html.TextBoxFor(model => model.ASSESSED_BY, new { @class = "form-control", @maxlength = "128" })
                            @Html.ValidationMessageFor(model => model.ASSESSED_BY)
                        </div>
                    </div>
                </div>

            </div>
        </section>
    </div>

    if (Model.QC_ASSESS_IDX != null)
    {
        <div class="row col-md-12">
            <section class="panel panel-qrest">
                <header class="panel-heading font-bold">Assessment Details</header>
                <div class="panel-body">

                    @if (Model.AssessmentDetails != null)
                    {
                        <div class="table-responsive">
                            <table id="gridData" class="table table-bordered" data-ride="datatables" style="width:100%">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Assessment (known or true) Value</th>
                                        <th>Monitor (output) Value</th>
                                        <th>Difference</th>
                                        <th>% Difference</th>
                                        @if (Model.ASSESSMENT_TYPE != "Flow Rate Verification" && Model.ASSESSMENT_TYPE != "Semi-Annual Flow Rate Audit")
                                        {
                                            <th>Concentration Range</th>
                                        }
                                        <th>Comments</th>
                                    </tr>
                                </thead>
                                @for (int i = 0; i < Model.AssessmentDetails.Count(); i++)
                                {
                                    <tr>
                                        @Html.HiddenFor(model => model.AssessmentDetails[i].QC_ASSESS_DTL_IDX)
                                        <td>
                                            <div class="delete-section" style="display:inline-block">
                                                <a class=" btn btn-rounded btn-xs btn-danger delete-link"><i class="fa fa-times"></i></a>
                                                <div class="btn btn-rounded btn-xs btn-warning delete-confirm" style="display:none" data-delete-id="@Html.ValueFor(model => model.AssessmentDetails[i].QC_ASSESS_DTL_IDX)" data-delete-p="/Data/QCDtlDelete"><b>Confirm Delete</b></div>
                                            </div>
                                        </td>
                                        <td style="padding:0">
                                            @Html.TextBoxFor(model => model.AssessmentDetails[i].ASSESS_KNOWN_CONCENTRATION, new { @class = "form-control input", @autocomplete = "off" })
                                        </td>
                                        <td style="padding:0">
                                            @Html.TextBoxFor(model => model.AssessmentDetails[i].MON_CONCENTRATION, new { @class = "form-control", @autocomplete = "off" })
                                        </td>
                                        @if (Model.AssessmentDetails[i].exceed_amt_difference_ind == true)
                                        {
                                            <td class="lert bg-danger">@String.Format("{0:G}", Model.AssessmentDetails[i].difference)</td>
                                        }
                                        else
                                        {
                                            <td class="lert bg-success">@String.Format("{0:G}", Model.AssessmentDetails[i].difference)</td>
                                        }
                                        @if (Model.AssessmentDetails[i].exceed_pct_difference_ind == true)
                                        {
                                            <td class="lert bg-danger">@Html.DisplayFor(model => model.AssessmentDetails[i].pct_difference)</td>
                                        }
                                        else
                                        {
                                            <td class="lert bg-success">@Html.DisplayFor(model => model.AssessmentDetails[i].pct_difference)</td>
                                        }

                                        @if (Model.ASSESSMENT_TYPE != "Flow Rate Verification" && Model.ASSESSMENT_TYPE != "Semi-Annual Flow Rate Audit")
                                        {
                                            <td class="lert @(Model.AssessmentDetails[i].audit_level_int == 0 ? "bg-danger" : "bg-success")">
                                                @Html.DisplayFor(model => model.AssessmentDetails[i].audit_level_disp)
                                            </td>
                                        }

                                        <td style="padding:0">
                                            @Html.TextBoxFor(model => model.AssessmentDetails[i].COMMENTS, new { @class = "form-control input", @autocomplete = "off" })
                                        </td>

                                    </tr>
                                }

                                @if (Model.ASSESSMENT_TYPE == "Annual PE" && Model.AuditLevelDistinctCount != null)
                                {
                                    <tfoot>
                                        <tr>
                                            <td colspan="5"></td>
                                            @if (Model.AuditLevelDistinctCount < 3)
                                            {
                                                <td class="lert bg-danger">Covers @Html.DisplayFor(model => model.AuditLevelDistinctCount) distinct Audit Levels</td>
                                            }
                                            else
                                            {
                                                <td class="lert bg-success">Covers @Html.DisplayFor(model => model.AuditLevelDistinctCount) distinct Audit Levels</td>
                                            }
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                }
                            </table>
                        </div>
                    }

                </div>
            </section>


        </div>
    }

    <p>
        <button id="btnSave" type="submit" disabled class="btn btn-primary ">Save</button>
        <a class=" btn btn-default" href="@Url.Action("QCList", new { selOrgID = Model.ORG_ID })">Back to List</a>
        @if (Model.QC_ASSESS_IDX != null)
        {
            <a class=" btn btn-danger pull-right" href="@Url.Action("AQSGenQA", new { typ = "QA", qid=Model.QC_ASSESS_IDX })">Send to AQS</a>
        }
    </p>

}

@Html.Partial("_PleaseWait", "Shared")
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/confirm-delete")
    @Scripts.Render("~/bundles/cleave")
    @Scripts.Render("~/bundles/areyousure")
    @Scripts.Render("~/bundles/moment")

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

    <script type="text/javascript">
        // Enable dirtyforms
        $('#norepostform').dirtyForms();
        // Enable/disable the submit button when the state transitions between dirty and clean.
        $('form').on('dirty.dirtyforms clean.dirtyforms', function (ev) {
            if (ev.type === 'dirty') {
                $(".lert").removeClass("bg-danger").removeClass("bg-success").addClass("bg-light").addClass("blurzy");
                $("#btnSave").prop("disabled", false);
            } else {
                $(".lert").removeClass("bg-light").removeClass("blurzy");
                $("#btnSave").prop("disabled", true);
            }
        });



        $(document).ready(function () {

            //daterange selector initialization
            $('input[name="ASSESSMENT_DT"]').daterangepicker({
                singleDatePicker: true,
                showDropdowns: true,
                autoUpdateInput: false,
                autoApply: true,
                locale: {
                    format: 'M/DD/YYYY'
                }
            }
                , function (start, end, label) {
                    //callback, gets fired when date range is selected, setting values to viewmodel
                    $('#ASSESSMENT_DT').val(start.format('MM/DD/YYYY'));
                    //    $('#selDate').data('start', start.format('YYYY-MM-DD'));
                //    $('#selDate').data('end', end.format('YYYY-MM-DD'));
                }
            );


            //assessment type dropdown change
            $('#ASSESSMENT_TYPE').change(function () {
                var typ = $(this).val();
                if (typ == "Flow Rate Verification" || typ == "Semi-Annual Flow Rate Audit")
                    $("#divUnit").show();
                else
                    $("#divUnit").hide();
            });

            //update monitor dropdown
            $('#ASSESSMENT_TYPE').change(function () {
                fetchMonitors();
            });

            //update monitor dropdown
            function fetchMonitors() {
                $('#MONITOR_IDX').empty();
                $.getJSON('@Url.Action("FetchMonitorsQC")', { qctyp: $("#ASSESSMENT_TYPE").val() }, function (data) {
                    if (!data) {
                        return;
                    }
                    if (data.length != 1)
                        $('#MONITOR_IDX').append($('<option></option>').val('').text('Please select'));

                    $.each(data, function (index, item) {
                        $('#MONITOR_IDX').append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            };

        });
    </script>
}