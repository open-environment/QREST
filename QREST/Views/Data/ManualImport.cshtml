@model QREST.Models.vmDataImport
@{
    ViewBag.Title = "Import Data";
    ViewBag.SubTitle = "Import hourly or n-minute raw data";
}

@if (Model.ImportSuccCount > 0)
{
    <div class="alert alert-success">
        <p>
            @Model.ImportSuccCount records imported successfully.
        </p>
        @if (Model.IMPORT_IDX != null)
        {
        <p>
            Import ID: @Model.IMPORT_IDX
        </p>
        }
    </div>
}

<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("ManualImport", "Data", FormMethod.Post, new { @class = "", enctype = "multipart/form-data", @id = "norepostform" }))
        {
            @Html.AntiForgeryToken()

            <section class="panel panel-qrest">
                <div class="panel-heading font-bold">
                    Paste Data Below to Import
                </div>
                <div class="panel-body">
                    <div class="form-inline m-b-sm" onsubmit="return false">
                        @Html.DropDownListFor(model => model.selImportType, Model.ddl_ImportType, "--Select Import Type--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selImportType)
                    </div>
                    <div id="subPar" class="form-inline m-b-sm collapse" onsubmit="return false">
                        @Html.DropDownListFor(model => model.selOrgID, Model.ddl_Organization, "--Select Tribe--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selOrgID)

                        @Html.DropDownListFor(model => model.selSite, Model.ddl_Sites, "--Select Site--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selSite)

                        @Html.DropDownListFor(model => model.selMonitor, Model.ddl_Monitors, "--Select Parameter--", new { @class = "form-control", @style = "display:none" })
                        @Html.ValidationMessageFor(model => model.selMonitor)

                        @Html.DropDownListFor(model => model.selPollConfig, Model.ddl_PollConfig, "--Select Import Template--", new { @class = "form-control", @style = "display:none" })
                        @Html.ValidationMessageFor(model => model.selPollConfig)

                        @Html.DropDownListFor(model => model.selTimeType, Model.ddl_Time, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.selTimeType)

                        @Html.DropDownListFor(model => model.selTimeZone, Model.ddl_TimeZone, "--Site Local Time Zone--", new { @class = "form-control", @style = "display:none" })
                        @Html.ValidationMessageFor(model => model.selTimeZone)

                        <a id="tempUrl" class="btn btn-sm btn-warning" data-root="@Url.Action("DownloadTemplate","Site")" style="display:none;" href="">Download import template</a>
                    </div>
                    <div id="recalcDiv" class="row col-md-6" style="display:none;">
                        <div class="form-group">
                            <label class="text-danger">Calculate Hourly Data Upon Import <b>(WARNING: will override any existing hourly data!)</b></label>                            
                            @Html.DropDownListFor(model => model.selCalc, Model.ddl_Calc, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.selCalc)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.TextAreaFor(model => model.IMPORT_BLOCK, new { @class = "form-control ", @placeholder = "(Paste data here)", @rows = "10" })
                                @Html.ValidationMessageFor(model => model.IMPORT_BLOCK)
                            </div>
                        </div>
                        <div class="col-md-12">
                            <button type="submit" class="btn btn-primary">Import Data</button>
                        </div>
                    </div>
                    <div class="row">
                    </div>
                </div>
            </section>
        }
    </div>
</div>


@if (Model.error_data != null && Model.error_data.Count > 0)
{
    <!-- DISPLAY ERRORS-->
    <h3>Validation Summary</h3>
    <span class="">Some records have import validation errors. Please fix and reimport the entire data set.</span>
    <div class="row">
        <div class="col-md-12">
            <div class="table-responsive">
                <table class="table table-striped table-bordered" data-ride="datatables">
                    <tr>
                        <th>DateTime</th>
                        <th>Value</th>
                    </tr>
                    @foreach (var item in Model.error_data)
                    {
                        <tr class="danger">
                            <td>
                                @Html.DisplayFor(modelItem => item.DATA_DTTM)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DATA_VALUE)
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
}

@Html.Partial("_PleaseWait", "Shared")

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            dispSubPar();

            //import type dropdown change
            $('#selImportType').change(function () {
                dispSubPar();
            });

            // org dropdown change
            $('#selOrgID').change(function () {
                dispSites();
            });


            //displays approriate data filters based on the Import Type
            function dispSubPar() {
                var xxx = $('#selImportType').val();
                if (xxx != "") {
                    $("#subPar").addClass("show");

                    if (xxx == "H1") {
                        $("#selMonitor").show();
                        $("#selPollConfig").hide();
                        $("#selTimeZone").show();
                    }
                    else {
                        $("#selMonitor").hide();
                        $("#selPollConfig").show();
                        $("#selTimeZone").hide();
                    }

                    if (xxx == "F") 
                        $("#recalcDiv").show();
                    else
                        $("#recalcDiv").hide();
                }
                else
                    $("#subPar").removeClass("show");
            }





            function dispSites() {
                var url = '@Url.Action("FetchSites")';
                var sites = $('#selSite');
                sites.empty();

                $('#selMonitor').empty();   //clear out monitors too

                $.getJSON(url, { ID: $('#selOrgID').val() }, function (data) {
                    if (!data) {
                        return;
                    }
                    sites.append($('<option></option>').val('').text('--Select Site--'));
                    $.each(data, function (index, item) {
                        sites.append($('<option></option>').val(item.Value).text(item.Text));
                    });
                });
            }




            //changing the site dropdown
            $('#selSite').change(function () {
                $("#tempUrl").hide();

                var yyy = $("#selImportType").val();

                if (yyy == "H1") {
                    $("#selPollConfig").hide();

                    //fetch parameters related to the selected site
                    var mons = $('#selMonitor');
                    mons.empty();
                    $.getJSON('@Url.Action("FetchMonitorsBySite")', { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        mons.append($('<option></option>').val('').text('--Select Parameter--'));
                        $.each(data, function (index, item) {
                            mons.append($('<option></option>').val(item.Value).text(item.Text));
                        });
                    });

                    //fetch the H1 import details if any exist to set 
                    $.getJSON('@Url.Action("FetchImportTemplateH1")', { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        if (data != "null") {
                            $("#selTimeType").val(data.TIME_POLL_TYPE);
                            $("#selTimeZone").val(data.LOCAL_TIMEZONE);
                        }
                    });


                }
                else {
                    $("#selPollConfig").show();

                    //fetch polling import template
                    var url = '@Url.Action("FetchImportTemplates")';
                    var polls = $('#selPollConfig');
                    polls.empty();
                    $.getJSON(url, { ID: $(this).val() }, function (data) {
                        if (!data) {
                            return;
                        }
                        polls.append($('<option></option>').val('').text('--Select Import Template--'));
                        $.each(data, function (index, item) {
                            polls.append($('<option></option>').val(item.Value).text(item.Text));
                        });
                    });
                }

            });


            //update import template dropdown
            $('#selPollConfig').change(function () {
                var xxx = $("#tempUrl").data('root');
                $("#tempUrl").attr('href', xxx + '/' + $(this).val());

                $("#tempUrl").show();
            });



            $("form").submit(function () {
                if (!$(this).valid()) {
                    return false;
                }
                else
                {
                    pleaseWait();
                    return true;
                }
            });

        });

    </script>
}